// This file is auto-generated by @hey-api/openapi-ts

export type CreateUserDto = {
    username: string;
    password: string;
};

export type GetManyUserResponseDto = {
    data: Array<User>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type Role = {
    id: number;
    name: string;
    user: User;
};

export type User = {
    id: number;
    username: string;
    password: string;
    roles: Array<Role>;
};

export type CreateManyUserDto = {
    bulk: Array<User>;
};

export type GetManyCropYieldLevelResponseDto = {
    data: Array<CropYieldLevel>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type CropYieldLevel = {
    /**
     * 边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: string;
    /**
     * 作物类型
     */
    cropType: string;
    /**
     * 作物产量
     */
    cropYield: number;
    /**
     * 备注
     */
    remark?: string;
};

export type CreateManyCropYieldLevelDto = {
    bulk: Array<CropYieldLevel>;
};

export type GetManyCroppingSystemResponseDto = {
    data: Array<CroppingSystem>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type CroppingSystem = {
    /**
     * 边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: string;
    /**
     * 面积
     */
    area: number;
    /**
     * 熟制
     */
    croppingSystem: string;
    /**
     * 备注
     */
    remark?: string;
};

export type CreateManyCroppingSystemDto = {
    bulk: Array<CroppingSystem>;
};

export type GetManyDominantVegetationSpeciesResponseDto = {
    data: Array<DominantVegetationSpecies>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type DominantVegetationSpecies = {
    /**
     * 边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: string;
    /**
     * 植被类型
     */
    vegetationType: string;
    /**
     * 备注
     */
    remark?: string;
};

export type CreateManyDominantVegetationSpeciesDto = {
    bulk: Array<DominantVegetationSpecies>;
};

export type GetManyLandUsageResponseDto = {
    data: Array<LandUsage>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type LandUsage = {
    /**
     * 边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: string;
    /**
     * 要素代码
     */
    elementCode: {
        [key: string]: unknown;
    };
    /**
     * 图斑编号
     */
    plotNumber: string;
    /**
     * 地类编码
     */
    landClassCode: string;
    /**
     * 地类名称
     */
    landClassName: string;
    /**
     * 坐落单位代码
     */
    locationUnitCode: string;
    /**
     * 坐落单位名称
     */
    locationUnitName: string;
    /**
     * 图斑面积
     */
    plotArea: number;
    /**
     * 坡度级别
     */
    slopeLevel: string;
    /**
     * 耕地地力等级
     */
    arableLandQualityGrade: string;
    /**
     * 备注
     */
    remark: string;
};

export type CreateManyLandUsageDto = {
    bulk: Array<LandUsage>;
};

export type GetManyPlantingStructureResponseDto = {
    data: Array<PlantingStructure>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type PlantingStructure = {
    /**
     * 边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: string;
    /**
     * 面积
     */
    area: number;
    /**
     * 种植类型
     */
    plantingType: string;
    /**
     * 备注
     */
    remark?: string;
};

export type CreateManyPlantingStructureDto = {
    bulk: Array<PlantingStructure>;
};

export type GetManySlopeMapResponseDto = {
    data: Array<SlopeMap>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SlopeMap = {
    /**
     * 边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: string;
    /**
     * 要素代码
     */
    elementCode: string;
    /**
     * 坡度级别
     */
    slopeGrade: string;
    /**
     * 备注
     */
    remark?: string;
};

export type CreateManySlopeMapDto = {
    bulk: Array<SlopeMap>;
};

export type GetManySoilTypeResponseDto = {
    data: Array<SoilType>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SoilType = {
    /**
     * 边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: {
        [key: string]: unknown;
    };
    /**
     * 土类
     */
    soilClass: string;
    /**
     * 亚类
     */
    soilSubclass: string;
    /**
     * 土属
     */
    soilFamily: string;
    /**
     * 土种
     */
    soilSeries: string;
    /**
     * 面积
     */
    area: number;
    /**
     * 备注
     */
    remark: string;
};

export type CreateManySoilTypeDto = {
    bulk: Array<SoilType>;
};

export type GetManyBoundaryResponseDto = {
    data: Array<Boundary>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type Boundary = {
    /**
     * 界线
     */
    line: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: {
        [key: string]: unknown;
    };
    /**
     * 界线类型
     */
    boundaryType: {
        [key: string]: unknown;
    };
    /**
     * 界线性质
     */
    boundaryNature: {
        [key: string]: unknown;
    };
    /**
     * 界线说明
     */
    boundaryDescription: string;
};

export type CreateManyBoundaryDto = {
    bulk: Array<Boundary>;
};

export type GetManyCountyResponseDto = {
    data: Array<County>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type County = {
    /**
     * 行政区边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: {
        [key: string]: unknown;
    };
    /**
     * 行政区名称
     */
    name: string;
    /**
     * 行政区代码
     */
    code: string;
    /**
     * 行政区面积
     */
    area: number;
    /**
     * 备注
     */
    remark: string;
};

export type CreateManyCountyDto = {
    bulk: Array<County>;
};

export type GetManyPrefectureResponseDto = {
    data: Array<Prefecture>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type Prefecture = {
    /**
     * 行政区边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: {
        [key: string]: unknown;
    };
    /**
     * 行政区名称
     */
    name: string;
    /**
     * 行政区代码
     */
    code: string;
    /**
     * 行政区面积
     */
    area: number;
    /**
     * 备注
     */
    remark: string;
};

export type CreateManyPrefectureDto = {
    bulk: Array<Prefecture>;
};

export type GetManyProvinceResponseDto = {
    data: Array<Province>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type Province = {
    /**
     * 行政区边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: {
        [key: string]: unknown;
    };
    /**
     * 行政区名称
     */
    name: string;
    /**
     * 行政区代码
     */
    code: string;
    /**
     * 行政区面积
     */
    area: number;
    /**
     * 备注
     */
    remark: string;
};

export type CreateManyProvinceDto = {
    bulk: Array<Province>;
};

export type GetManyTownshipResponseDto = {
    data: Array<Township>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type Township = {
    /**
     * 行政区边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: {
        [key: string]: unknown;
    };
    /**
     * 行政区名称
     */
    name: string;
    /**
     * 行政区代码
     */
    code: string;
    /**
     * 行政区面积
     *
     * @notice 单位：m²
     */
    area: number;
    /**
     * 备注
     */
    remark: string;
};

export type CreateManyTownshipDto = {
    bulk: Array<Township>;
};

export type GetManyVilliageResponseDto = {
    data: Array<Villiage>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type Villiage = {
    /**
     * 行政区边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: {
        [key: string]: unknown;
    };
    /**
     * 行政区名称
     */
    name: string;
    /**
     * 行政区代码
     */
    code: string;
    /**
     * 行政区面积
     *
     * @notice 单位：m²
     */
    area: number;
    /**
     * 备注
     */
    remark: string;
};

export type CreateManyVilliageDto = {
    bulk: Array<Villiage>;
};

export type GetManyRasterMapResponseDto = {
    data: Array<RasterMap>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type RasterMap = {
    /**
     * 栅格数据
     */
    raster?: string;
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: {
        [key: string]: unknown;
    };
    /**
     * 图幅编号
     */
    mapSheetNumber: string;
    /**
     * 图幅名称
     */
    mapSheetName: string;
    /**
     * 数据类型
     */
    dataType: '数字正射影像图' | '数字栅格地图' | '数字高程模型' | '其他栅格数据';
    /**
     * 头文件名
     */
    headerFileName: string;
    /**
     * 数据文件名
     */
    dataFileName: string;
    /**
     * 元数据文件名
     */
    metadataFileName: string;
    /**
     * 影像来源
     */
    imageSource: string;
    /**
     * 影像分辨率
     */
    imageResolution: string;
    /**
     * 高程基准
     */
    elevationDatum: string;
    /**
     * 地形类别
     */
    terrainCategory: string;
    /**
     * 成图比例尺
     */
    mapScale: string;
    /**
     * 坐标系统类型
     */
    coordinateSystemType: string;
    /**
     * 大地平面坐标投影
     */
    mapProjection: string;
    /**
     * 中央经线经度
     */
    centralMeridianLongitude: number;
    /**
     * 左下角X坐标
     */
    lowerLeftX: number;
    /**
     * 左下角Y坐标
     */
    lowerLeftY: number;
    /**
     * 右上角X坐标
     */
    upperRightX: number;
    /**
     * 右上角Y坐标
     */
    upperRightY: number;
    /**
     * 拍摄时间
     */
    captureDate: string;
    /**
     * 备注
     */
    remark: string;
};

/**
 * 数据类型
 */
export type dataType = '数字正射影像图' | '数字栅格地图' | '数字高程模型' | '其他栅格数据';

export type CreateManyRasterMapDto = {
    bulk: Array<RasterMap>;
};

export type GetManySamplingAreaResponseDto = {
    data: Array<SamplingArea>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SamplingArea = {
    /**
     * 边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: string;
    /**
     * 土地利用类型
     */
    landUseType: string;
    /**
     * 坡度级别
     */
    slopeGrade: string;
    /**
     * 土类
     */
    soilCategory: string;
    /**
     * 亚类
     */
    subCategory: string;
    /**
     * 土属
     */
    soilGenus: string;
    /**
     * 土种
     */
    soilSpecies: string;
    /**
     * 中心点经度
     */
    longitude: number;
    /**
     * 中心点纬度
     */
    latitude: number;
    /**
     * 面积
     */
    area: number;
    /**
     * 备注
     */
    remark?: string;
};

export type CreateManySamplingAreaDto = {
    bulk: Array<SamplingArea>;
};

export type GetManySamplingGridResponseDto = {
    data: Array<SamplingGrid>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SamplingGrid = {
    /**
     * 边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: string;
    /**
     * 网格大小
     */
    gridSize: string;
    /**
     * 左下角经度
     */
    longitudeBottomLeft: number;
    /**
     * 左下角纬度
     */
    latitudeBottomLeft: number;
    /**
     * 备注
     */
    remark?: string;
};

export type CreateManySamplingGridDto = {
    bulk: Array<SamplingGrid>;
};

export type GetManySamplingPointResponseDto = {
    data: Array<SamplingPoint>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SamplingPoint = {
    /**
     * 坐标点
     */
    point: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: string;
    /**
     * 样点编号
     */
    samplePointCode: string;
    /**
     * 样点类别
     */
    samplePointCategory: string;
    /**
     * 采样类型
     */
    samplingType: string;
    /**
     * 是否采集水稳性大团聚体
     */
    isWaterStableAggregateCollected: string;
    /**
     * 坐落单位代码
     */
    locationUnitCode: string;
    /**
     * 坐落单位名称
     */
    locationUnitName: string;
    /**
     * 经度
     */
    longitude: number;
    /**
     * 纬度
     */
    latitude: number;
    /**
     * 坡度
     */
    slope: string;
    /**
     * 土地利用类型
     */
    landUseType: string;
    /**
     * 土壤类型编码
     */
    soilTypeCode?: string;
    /**
     * 土类
     */
    soilCategory: string;
    /**
     * 亚类
     */
    soilSubCategory: string;
    /**
     * 土属
     */
    soilGroup: string;
    /**
     * 土种
     */
    soilSubGroup: string;
    /**
     * 备注
     */
    remark?: string;
};

export type CreateManySamplingPointDto = {
    bulk: Array<SamplingPoint>;
};

export type GetManySurveyedPointResponseDto = {
    data: Array<SurveyedPoint>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SurveyedPoint = {
    /**
     * 坐标点
     */
    point: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: string;
    /**
     * 样点编号
     */
    samplePointCode: string;
    /**
     * 样点类别
     */
    samplePointCategory: string;
    /**
     * 采样类型
     */
    samplingType: string;
    /**
     * 是否采集水稳性大团聚体
     */
    collectedWaterStableAggregate: string;
    /**
     * 坐落单位代码
     */
    locationUnitCode: string;
    /**
     * 坐落单位名称
     */
    locationUnitName: string;
    /**
     * 经度
     */
    longitude: number;
    /**
     * 纬度
     */
    latitude: number;
    /**
     * 坡度
     */
    slope: string;
    /**
     * 是否修正
     */
    isAdjusted: '1' | '0';
    /**
     * 修正距离
     */
    adjustmentDistance?: number;
    /**
     * 土地利用类型
     */
    landUseType: string;
    /**
     * 土壤类型编码
     */
    soilTypeCode: string;
    /**
     * 土类
     */
    soilCategory: string;
    /**
     * 亚类
     */
    soilSubCategory: string;
    /**
     * 土属
     */
    soilGroup: string;
    /**
     * 土种
     */
    soilSubGroup: string;
    /**
     * 备注
     */
    remark?: string;
};

/**
 * 是否修正
 */
export type isAdjusted = '1' | '0';

export type CreateManySurveyedPointDto = {
    bulk: Array<SurveyedPoint>;
};

export type GetManySoilPropertyMappingUnitResponseDto = {
    data: Array<SoilPropertyMappingUnit>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SoilPropertyMappingUnit = {
    /**
     * 边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: string;
    /**
     * 指标名称
     */
    indicatorName: string;
    /**
     * 指标上限
     */
    upperLimit: number;
    /**
     * 指标下限
     */
    lowerLimit: number;
    /**
     * 指标值
     */
    indicatorValue: string;
    /**
     * 面积
     */
    area: number;
};

export type CreateManySoilPropertyMappingUnitDto = {
    bulk: Array<SoilPropertyMappingUnit>;
};

export type GetManySoilClassificationMappingUnitResponseDto = {
    data: Array<SoilClassificationMappingUnit>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SoilClassificationMappingUnit = {
    /**
     * 边界
     */
    border: {
        [key: string]: unknown;
    };
    /**
     * 标识码
     */
    id: number;
    /**
     * 要素代码
     */
    elementCode: string;
    /**
     * 土类
     */
    soilClass: string;
    /**
     * 亚类
     */
    soilSubclass: string;
    /**
     * 土属
     */
    soilFamily: string;
    /**
     * 土种
     */
    soilSeries: string;
    /**
     * 面积
     */
    area: number;
};

export type CreateManySoilClassificationMappingUnitDto = {
    bulk: Array<SoilClassificationMappingUnit>;
};

export type GetManySiteConditionInfoResponseDto = {
    data: Array<SiteConditionInfo>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SiteConditionInfo = {
    /**
     * 样点编号
     */
    samplePointCode: string;
    /**
     * 侵蚀类型
     */
    erosionType: string;
    /**
     * 侵蚀程度
     */
    erosionDegree: string;
    /**
     * 大地形
     */
    majorLandform: string;
    /**
     * 中地形
     */
    mediumLandform: string;
    /**
     * 小地形
     */
    minorLandform: string;
    /**
     * 地形部位
     */
    landformPosition: string;
    /**
     * 坡向
     */
    slopeDirection: string;
    /**
     * 母岩 (可多选)
     */
    parentRock: Array<(string)>;
    /**
     * 母质 (可多选)
     */
    parentMaterial: Array<(string)>;
    /**
     * 海拔高度
     */
    elevation: number;
    /**
     * 景观照片东
     */
    landscapePhotoEast: {
        [key: string]: unknown;
    };
    /**
     * 景观照片南
     */
    landscapePhotoSouth: {
        [key: string]: unknown;
    };
    /**
     * 景观照片西
     */
    landscapePhotoWest: {
        [key: string]: unknown;
    };
    /**
     * 景观照片北
     */
    landscapePhotoNorth: {
        [key: string]: unknown;
    };
    /**
     * 采样时间
     */
    samplingDate: string;
    /**
     * 天气情况
     */
    weatherCondition: string;
    /**
     * 基岩出露丰度
     */
    bedrockExposureAbundance: string;
    /**
     * 基岩出露间距
     */
    bedrockExposureSpacing: string;
    /**
     * 地表砾石丰度
     */
    surfaceGravelAbundance: string;
    /**
     * 地表砾石大小
     */
    surfaceGravelSize: string;
    /**
     * 地表盐斑丰度
     */
    surfaceSaltStainAbundance?: string;
    /**
     * 地表盐斑厚度
     */
    surfaceSaltStainThickness?: string;
    /**
     * 地表裂隙宽度
     */
    surfaceCrackWidth?: string;
    /**
     * 地表裂隙长度
     */
    surfaceCrackLength?: string;
    /**
     * 地表裂隙丰度
     */
    surfaceCrackAbundance?: string;
    /**
     * 地表裂隙间隙
     */
    surfaceCrackGap?: string;
    /**
     * 地表裂隙方向
     */
    surfaceCrackDirection?: string;
    /**
     * 地表裂隙连续性
     */
    surfaceCrackContinuity?: string;
    /**
     * 土壤沙化
     */
    soilDesertification?: string;
    /**
     * 轮作制度
     */
    cropRotationSystem?: string;
    /**
     * 轮作制度变更
     */
    cropRotationSystemChange?: string;
    /**
     * 耕地撂荒
     */
    farmlandAbandonment?: '常年' | '季节性' | '无撂荒';
    /**
     * 设施农业类型
     */
    facilityAgricultureType?: '露天蔬菜地' | '塑料大棚' | '玻璃温室' | '其它';
    /**
     * 蔬菜种植年限
     */
    vegetablePlantingYears?: number;
    /**
     * 复种类型
     */
    cropRotationType?: string;
    /**
     * 作物类型
     */
    cropType?: string;
    /**
     * 产量水平
     */
    yieldLevel?: number;
    /**
     * 肥料种类
     */
    fertilizerType?: '商品有机肥' | '化肥' | '土杂肥' | '其它';
    /**
     * 施用量
     */
    applicationAmount?: number;
    /**
     * 施用方式
     */
    applicationMethod?: string;
    /**
     * 培肥措施
     */
    soilImprovementMeasures?: '秸秆还田' | '免耕' | '少耕' | '休耕' | '种植绿肥';
    /**
     * 是否高标准农田
     */
    isHighStandardFarmland?: string;
    /**
     * 灌溉保证率
     */
    irrigationGuaranteeRate?: number;
    /**
     * 农田排水条件
     */
    farmlandDrainageCondition?: string;
    /**
     * 田间道路工程
     */
    fieldRoadProject?: '机耕路' | '生产路';
    /**
     * 田间平整度
     */
    fieldLevelingDegree?: number;
    /**
     * 园地林龄
     */
    orchardTreeAge?: number;
    /**
     * 植被类型
     */
    vegetationType?: string;
    /**
     * 植被覆盖度
     */
    vegetationCoverage?: string;
    /**
     * 调查人
     */
    surveyor: string;
    /**
     * 调查单位
     */
    surveyUnit: string;
    /**
     * 备注
     */
    remark?: string;
};

/**
 * 耕地撂荒
 */
export type farmlandAbandonment = '常年' | '季节性' | '无撂荒';

/**
 * 设施农业类型
 */
export type facilityAgricultureType = '露天蔬菜地' | '塑料大棚' | '玻璃温室' | '其它';

/**
 * 肥料种类
 */
export type fertilizerType = '商品有机肥' | '化肥' | '土杂肥' | '其它';

/**
 * 培肥措施
 */
export type soilImprovementMeasures = '秸秆还田' | '免耕' | '少耕' | '休耕' | '种植绿肥';

/**
 * 田间道路工程
 */
export type fieldRoadProject = '机耕路' | '生产路';

export type CreateManySiteConditionInfoDto = {
    bulk: Array<SiteConditionInfo>;
};

export type GetManyMorphologyBasicInfoResponseDto = {
    data: Array<MorphologyBasicInfo>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type MorphologyBasicInfo = {
    /**
     * 样点编号
     */
    samplePointCode: string;
    /**
     * 剖面照片
     */
    profilePhoto: {
        [key: string]: unknown;
    };
    /**
     * 有效土层厚度
     */
    effectiveSoilLayerThickness: number;
    /**
     * 土体厚度
     */
    soilBodyThickness: number;
    /**
     * 土体构型 (通体壤、通体砂、通体黏、通体砾、砂/黏/砂、黏/砂/黏、壤/黏/壤、壤/砂/壤、砂/黏/黏、黏/砂/砂、壤/黏/黏、壤/砂/砂)
     */
    soilStructure: '通体壤' | '通体砂' | '通体黏' | '通体砾' | '砂/黏/砂' | '黏/砂/黏' | '壤/黏/壤' | '壤/砂/壤' | '砂/黏/黏' | '黏/砂/砂' | '壤/黏/黏' | '壤/砂/砂';
    /**
     * 发生层数
     */
    occurrenceLayers: number;
    /**
     * 备注
     */
    remark?: string;
};

/**
 * 土体构型 (通体壤、通体砂、通体黏、通体砾、砂/黏/砂、黏/砂/黏、壤/黏/壤、壤/砂/壤、砂/黏/黏、黏/砂/砂、壤/黏/黏、壤/砂/砂)
 */
export type soilStructure = '通体壤' | '通体砂' | '通体黏' | '通体砾' | '砂/黏/砂' | '黏/砂/黏' | '壤/黏/壤' | '壤/砂/壤' | '砂/黏/黏' | '黏/砂/砂' | '壤/黏/黏' | '壤/砂/砂';

export type CreateManyMorphologyBasicInfoDto = {
    bulk: Array<MorphologyBasicInfo>;
};

export type GetManyMorphologyStratifiedInfoResponseDto = {
    data: Array<MorphologyStratifiedInfo>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type MorphologyStratifiedInfo = {
    /**
     * 样点编号
     */
    samplePointCode: string;
    /**
     * 发生层序号
     * 从1开始
     */
    occurrenceLayerSequence: number;
    /**
     * 发生层类型
     */
    occurrenceLayerType: string;
    /**
     * 发生层照片
     * 可存储多个
     */
    occurrenceLayerPhoto: Array<{
        [key: string]: unknown;
    }>;
    /**
     * 新生体照片
     * 可存储多个
     */
    newFormationPhoto?: Array<{
        [key: string]: unknown;
    }>;
    /**
     * 侵入体照片
     * 可存储多个
     */
    intrusionPhoto?: Array<{
        [key: string]: unknown;
    }>;
    /**
     * 动物活动痕迹照片
     */
    animalActivityTracePhoto?: {
        [key: string]: unknown;
    };
    /**
     * 发生层厚度
     * 注1：发生层的厚度为范围描述，如：0～15cm、15～32cm等。
     */
    occurrenceLayerThickness: string;
    /**
     * 边界明显度
     */
    boundaryClarity: string;
    /**
     * 边界过渡形状
     */
    boundaryTransitionShape: string;
    /**
     * 根系大小
     */
    rootSize: string;
    /**
     * 根系丰度
     */
    rootAbundance: string;
    /**
     * 根系性质
     * 注2：字段取值为“木本植物根系、草本植物根系、活根根系、已腐烂的根系”中的一项或多项。
     */
    rootNature: '木本植物根系' | '草本植物根系' | '活根根系' | '已腐烂的根系';
    /**
     * 质地
     */
    texture: string;
    /**
     * 土壤结构形状
     */
    soilStructureShape: string;
    /**
     * 土壤结构大小
     */
    soilStructureSize: string;
    /**
     * 发育程度
     */
    developmentDegree: string;
    /**
     * 土内砾石丰度
     */
    soilGravelAbundance?: string;
    /**
     * 土内砾石大小
     */
    soilGravelSize?: string;
    /**
     * 土内砾石形状
     */
    soilGravelShape?: string;
    /**
     * 土内砾石风化程度
     */
    soilGravelWeatheringDegree?: string;
    /**
     * 土内砾石莫氏硬度（估）
     */
    soilGravelMohsHardnessEstimate?: string;
    /**
     * 土内砾石组成物质
     * 注3：可多选
     */
    soilGravelComposition?: Array<(string)>;
    /**
     * 总孔隙度
     */
    totalPorosity: string;
    /**
     * 孔隙丰度
     */
    porosityAbundance: string;
    /**
     * 孔隙粗细
     */
    porositySize: string;
    /**
     * 孔隙类型
     */
    porosityType: string;
    /**
     * 孔隙分布位置
     */
    porosityDistributionLocation: string;
    /**
     * 结构性
     * 注3：字段取值为“松散、松软、稍坚实、坚硬、很坚硬、极坚硬”中的一项。
     */
    structureType: '松散' | '松软' | '稍坚实' | '坚硬' | '很坚硬' | '极坚硬';
    /**
     * 新生体斑纹丰度
     */
    newFormationSpotAbundance?: string;
    /**
     * 新生体斑纹大小
     */
    newFormationSpotSize?: string;
    /**
     * 新生体斑纹位置
     */
    newFormationSpotLocation?: string;
    /**
     * 新生体斑纹与土壤基质对比
     */
    newFormationSpotContrast?: string;
    /**
     * 新生体斑纹边界
     */
    newFormationSpotBoundary?: string;
    /**
     * 新生体斑纹组成物质
     */
    newFormationSpotComposition?: string;
    /**
     * 新生体胶膜丰度
     */
    newFormationGelMembraneAbundance?: string;
    /**
     * 新生体胶膜位置
     */
    newFormationGelMembraneLocation?: string;
    /**
     * 新生体胶膜组成物质
     */
    newFormationGelMembraneComposition?: string;
    /**
     * 新生体胶膜与土壤基质对比
     */
    newFormationGelMembraneContrast?: string;
    /**
     * 矿质瘤状结核丰度
     */
    mineralNoduleAbundance?: string;
    /**
     * 矿质瘤状结核种类
     */
    mineralNoduleType?: string;
    /**
     * 矿质瘤状结核大小
     */
    mineralNoduleSize?: string;
    /**
     * 矿质瘤状结核形状
     */
    mineralNoduleShape?: string;
    /**
     * 矿质瘤状结核硬度
     */
    mineralNoduleHardness?: string;
    /**
     * 矿质瘤状结核组成物质
     */
    mineralNoduleComposition?: string;
    /**
     * 新生体层连续性
     */
    newFormationLayerContinuity?: string;
    /**
     * 新生体层内部构造
     */
    newFormationLayerInternalStructure?: string;
    /**
     * 新生体层胶结程度
     */
    newFormationLayerCementationDegree?: string;
    /**
     * 新生体层组成物质
     */
    newFormationLayerComposition?: string;
    /**
     * 新生体层成因或起源
     */
    newFormationLayerOrigin?: string;
    /**
     * 滑擦面面积
     */
    slidingSurfaceArea?: string;
    /**
     * 侵入体种类
     * 注4：可多选
     */
    intrusionType?: Array<(string)>;
    /**
     * 侵入体丰度
     */
    intrusionAbundance?: string;
    /**
     * 土壤动物种类
     * 注4：可多选
     */
    soilAnimalType?: Array<(string)>;
    /**
     * 土壤动物丰度
     */
    soilAnimalAbundance?: string;
    /**
     * 土壤动物粪便丰度
     */
    soilAnimalFecesAbundance?: string;
    /**
     * 土壤动物影响情况
     */
    soilAnimalImpactCondition?: string;
    /**
     * 石灰反应
     */
    limeReaction: string;
    /**
     * 亚铁反应
     */
    ferrousReaction?: string;
    /**
     * 电导率速测
     * 注5：单位一般为us/cm，盐渍程度高时单位为ms/cm。填写样例“10ms/cm”。
     */
    conductivityQuickTest?: string;
    /**
     * 酚酞反应
     */
    phenolphthaleinReaction?: string;
    /**
     * 酸碱度
     */
    pHValue: string;
    /**
     * 备注
     */
    remark?: string;
};

/**
 * 根系性质
 * 注2：字段取值为“木本植物根系、草本植物根系、活根根系、已腐烂的根系”中的一项或多项。
 */
export type rootNature = '木本植物根系' | '草本植物根系' | '活根根系' | '已腐烂的根系';

/**
 * 结构性
 * 注3：字段取值为“松散、松软、稍坚实、坚硬、很坚硬、极坚硬”中的一项。
 */
export type structureType = '松散' | '松软' | '稍坚实' | '坚硬' | '很坚硬' | '极坚硬';

export type CreateManyMorphologyStratifiedInfoDto = {
    bulk: Array<MorphologyStratifiedInfo>;
};

export type GetManySamplingInfoResponseDto = {
    data: Array<SamplingInfo>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SamplingInfo = {
    /**
     * 样品编号
     * 本表注1：样品编号规则使用“16位样点编号+2位顺序号”。
     */
    sampleCode: string;
    /**
     * 样点编号
     */
    samplePointCode: string;
    /**
     * 样品类型
     */
    sampleType: string;
    /**
     * 层号
     * 可选字段
     */
    layerCode?: string;
    /**
     * 样品重量
     * 单位：g
     */
    sampleWeight: number;
    /**
     * 采样人
     */
    sampler: string;
    /**
     * 采样机构
     */
    samplingOrganization: string;
    /**
     * 采样时间
     */
    samplingDate: string;
    /**
     * 备注
     * 可选字段
     */
    notes?: string;
};

export type CreateManySamplingInfoDto = {
    bulk: Array<SamplingInfo>;
};

export type GetManyPreparationResponseDto = {
    data: Array<Preparation>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type Preparation = {
    /**
     * 样品编号
     * 注1：样品编号规则使用“16位样点编号+2位顺序号”。
     */
    sampleCode: string;
    /**
     * 加密样品编号
     * 注2：加密样品编号通过加密算法对样品编号进行加密后转换化为10位编号。
     */
    encryptedSampleCode?: string;
    /**
     * 样品类型
     */
    sampleType: string;
    /**
     * 保存方式
     * 字段取值为“1=常温、2=低温、3=避光”中的一项。
     */
    preservationMethod: '1' | '2' | '3';
    /**
     * 研磨方式
     * TODO: 值域见本表注4，需根据具体规则进行验证。
     * 字段取值为“手工研磨、仪器研磨”中的一项。
     */
    grindingMethod: '手工研磨' | '仪器研磨';
    /**
     * 仪器编号
     */
    instrumentCode?: string;
    /**
     * 仪器名称
     */
    instrumentName?: string;
    /**
     * 接收样品重量
     */
    receivedSampleWeight: number;
    /**
     * 风干样品重量
     */
    airDriedSampleWeight: number;
    /**
     * 粗磨筛后重量
     */
    coarseGrindingWeight?: number;
    /**
     * 石砾重量
     */
    gravelWeight: number;
    /**
     * 石砾重量百分数
     */
    gravelWeightPercentage: number;
    /**
     * 国家样品库分样重量
     */
    nationalSampleLibraryWeight?: number;
    /**
     * 制备留存样品重量
     */
    retainedSampleWeight: number;
    /**
     * 送检样品重量
     */
    sampleWeightForInspection: number;
    /**
     * 制备人
     */
    preparer: string;
    /**
     * 制备机构
     */
    preparationInstitution: string;
    /**
     * 制备时间
     */
    preparationDate: string;
    /**
     * 校核人
     */
    checker?: string;
    /**
     * 校核时间
     */
    checkDate?: string;
    /**
     * 审核人
     */
    reviewer?: string;
    /**
     * 审核时间
     */
    reviewDate?: string;
};

/**
 * 保存方式
 * 字段取值为“1=常温、2=低温、3=避光”中的一项。
 */
export type preservationMethod = '1' | '2' | '3';

/**
 * 研磨方式
 * TODO: 值域见本表注4，需根据具体规则进行验证。
 * 字段取值为“手工研磨、仪器研磨”中的一项。
 */
export type grindingMethod = '手工研磨' | '仪器研磨';

export type CreateManyPreparationDto = {
    bulk: Array<Preparation>;
};

export type GetManySoilPhysicalPropertyResponseDto = {
    data: Array<SoilPhysicalProperty>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SoilPhysicalProperty = {
    /**
     * 样品编号
     */
    sampleCode: string;
    /**
     * 样品批次
     */
    sampleBatch: string;
    /**
     * 样品类型
     */
    sampleType: string;
    /**
     * 土壤容重
     * 单位：g/cm3
     */
    soilBulkDensity: number;
    /**
     * 机械组成1
     * TODO: 值域见本表注1，需根据具体规则进行验证。
     * 单位：%
     */
    mechanicalComposition1: number;
    /**
     * 机械组成2
     * TODO: 值域见本表注1，需根据具体规则进行验证。
     * 单位：%
     */
    mechanicalComposition2: number;
    /**
     * 机械组成3
     * TODO: 值域见本表注1，需根据具体规则进行验证。
     * 单位：%
     */
    mechanicalComposition3: number;
    /**
     * 机械组成4
     * TODO: 值域见本表注1，需根据具体规则进行验证。
     * 单位：%
     */
    mechanicalComposition4: number;
    /**
     * 土壤质地
     * TODO: 值域见表B.21，需根据具体规则进行验证。
     */
    soilTexture: string;
    /**
     * 水稳性大团聚体含量1
     * TODO: 值域见本表注2，需根据具体规则进行验证。
     * 单位：%
     */
    waterStableAggregateContent1?: number;
    /**
     * 水稳性大团聚体含量2
     * TODO: 值域见本表注2，需根据具体规则进行验证。
     * 单位：%
     */
    waterStableAggregateContent2?: number;
    /**
     * 水稳性大团聚体含量3
     * TODO: 值域见本表注2，需根据具体规则进行验证。
     * 单位：%
     */
    waterStableAggregateContent3?: number;
    /**
     * 水稳性大团聚体含量4
     * TODO: 值域见本表注2，需根据具体规则进行验证。
     * 单位：%
     */
    waterStableAggregateContent4?: number;
    /**
     * 水稳性大团聚体含量5
     * TODO: 值域见本表注2，需根据具体规则进行验证。
     * 单位：%
     */
    waterStableAggregateContent5?: number;
    /**
     * 水稳性大团聚体含量6
     * TODO: 值域见本表注2，需根据具体规则进行验证。
     * 单位：%
     */
    waterStableAggregateContent6?: number;
    /**
     * 水稳性大团聚体含量7
     * TODO: 值域见本表注2，需根据具体规则进行验证。
     * 单位：%
     */
    waterStableAggregateContent7?: number;
    /**
     * 水稳性大团聚体总和
     * TODO: 值域见本表注2，需根据具体规则进行验证。
     * 单位：%
     */
    totalWaterStableAggregateContent?: number;
    /**
     * 检测实验室代码
     */
    labCode: string;
    /**
     * 接样日期
     */
    sampleReceptionDate: string;
    /**
     * 报告日期
     */
    reportDate: string;
    /**
     * 联系人
     */
    contactPerson: string;
    /**
     * 电话
     */
    phoneNumber: string;
};

export type CreateManySoilPhysicalPropertyDto = {
    bulk: Array<SoilPhysicalProperty>;
};

export type GetManySoilChemicalPropertyResponseDto = {
    data: Array<SoilChemicalProperty>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SoilChemicalProperty = {
    /**
     * 样品编号
     */
    sampleCode: string;
    /**
     * 样品批次
     */
    sampleBatch: string;
    /**
     * 样品类型
     */
    sampleType: string;
    /**
     * pH
     */
    ph: number;
    /**
     * 可交换酸度
     */
    exchangeableAcidity?: number;
    /**
     * 阳离子交换量
     * 单位：cmol(+)/kg
     */
    cationExchangeCapacity: number;
    /**
     * 交换性盐基总量
     * 单位：cmol(+)/kg
     */
    exchangeableBaseCations: number;
    /**
     * 交换性钙
     * 单位：cmol(+)/kg
     */
    exchangeableCalcium: number;
    /**
     * 交换性镁
     * 单位：cmol(+)/kg
     */
    exchangeableMagnesium: number;
    /**
     * 交换性钠
     * 单位：cmol(+)/kg
     */
    exchangeableSodium: number;
    /**
     * 水溶性盐总量
     * 单位：g/kg
     */
    waterSolubleSaltContent: number;
    /**
     * 电导率
     * 单位：mS/cm
     */
    electricalConductivity: number;
    /**
     * 水溶性钠离子
     * 单位：cmol(Na+)/kg
     */
    waterSolubleSodiumIon: number;
    /**
     * 水溶性钾离子
     * 单位：cmol(K+)/kg
     */
    waterSolublePotassiumIon: number;
    /**
     * 水溶性钙离子
     * 单位：cmol(1/2Ca2+)/kg
     */
    waterSolubleCalciumIon: number;
    /**
     * 水溶性镁离子
     * 单位：cmol(1/2Mg2+)/kg
     */
    waterSolubleMagnesiumIon: number;
    /**
     * 水溶性碳酸根
     * 单位：cmol(1/2CO32-)/kg
     */
    waterSolubleCarbonateIon: number;
    /**
     * 水溶性碳酸氢根
     * 单位：cmol(HCO3-)/kg
     */
    waterSolubleBicarbonateIon: number;
    /**
     * 水溶性硫酸根
     * 单位：cmol(1/2SO42-)/kg
     */
    waterSolubleSulfateIon: number;
    /**
     * 水溶性氯根
     * 单位：cmol(Cl-)/kg
     */
    waterSolubleChlorideIon: number;
    /**
     * 有机质
     * 单位：g/kg
     */
    organicMatter: number;
    /**
     * 碳酸钙
     * 单位：g/kg
     */
    calciumCarbonate?: number;
    /**
     * 全氮
     * 单位：g/kg
     */
    totalNitrogen: number;
    /**
     * 全磷
     * 单位：g/kg
     */
    totalPhosphorus: number;
    /**
     * 全钾
     * 单位：g/kg
     */
    totalPotassium: number;
    /**
     * 全硫
     * 单位：g/kg
     */
    totalSulfur?: number;
    /**
     * 全硼
     * 单位：mg/kg
     */
    totalBoron?: number;
    /**
     * 全硒
     * 单位：mg/kg
     */
    totalSelenium?: number;
    /**
     * 全铁
     * 单位：mg/kg
     */
    totalIron?: number;
    /**
     * 全锰
     * 单位：mg/kg
     */
    totalManganese?: number;
    /**
     * 全铜
     * 单位：mg/kg
     */
    totalCopper?: number;
    /**
     * 全锌
     * 单位：mg/kg
     */
    totalZinc?: number;
    /**
     * 全钼
     * 单位：mg/kg
     */
    totalMolybdenum?: number;
    /**
     * 全铝
     * 单位：mg/kg
     */
    totalAluminum?: number;
    /**
     * 全硅
     * 单位：mg/kg
     */
    totalSilicon?: number;
    /**
     * 全钙
     * 单位：mg/kg
     */
    totalCalcium?: number;
    /**
     * 全镁
     * 单位：mg/kg
     */
    totalMagnesium?: number;
    /**
     * 有效磷
     * 单位：mg/kg
     */
    availablePhosphorus: number;
    /**
     * 缓效钾
     * 单位：mg/kg
     */
    slowReleasePotassium: number;
    /**
     * 速效钾
     * 单位：mg/kg
     */
    quickReleasePotassium: number;
    /**
     * 有效硫
     * 单位：mg/kg
     */
    availableSulfur?: number;
    /**
     * 有效硅
     * resolved todo:: 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    availableSilicon?: number;
    /**
     * 有效铁
     * 单位：mg/kg
     */
    availableIron: number;
    /**
     * 有效锰
     * 单位：mg/kg
     */
    availableManganese: number;
    /**
     * 有效铜
     * 单位：mg/kg
     */
    availableCopper: number;
    /**
     * 有效锌
     * 单位：mg/kg
     */
    availableZinc: number;
    /**
     * 有效硼
     * 单位：mg/kg
     */
    availableBoron: number;
    /**
     * 有效钼
     * 单位：mg/kg
     */
    availableMolybdenum: number;
    /**
     * 游离铁
     * resolved todo:: 需根据具体规则进行验证。
     * 单位：g/kg
     */
    freeIronOxide?: number;
    /**
     * 检测实验室代码
     */
    laboratoryCode: string;
    /**
     * 接样日期
     */
    sampleReceiptDate: string;
    /**
     * 报告日期
     */
    reportDate: string;
    /**
     * 联系人
     */
    contactPerson: string;
    /**
     * 电话
     */
    contactPhone: string;
};

export type CreateManySoilChemicalPropertyDto = {
    bulk: Array<SoilChemicalProperty>;
};

export type GetManySoilEnviroemtalPropertyResponseDto = {
    data: Array<SoilEnviroemtalProperty>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SoilEnviroemtalProperty = {
    /**
     * 样品编号
     */
    sampleCode: string;
    /**
     * 样品批次
     */
    sampleBatch: string;
    /**
     * 样品类型
     */
    sampleType: string;
    /**
     * 总铬
     * 单位：mg/kg
     */
    totalChromium: number;
    /**
     * 总镉
     * 单位：mg/kg
     */
    totalCadmium: number;
    /**
     * 总铅
     * 单位：mg/kg
     */
    totalLead: number;
    /**
     * 总砷
     * 单位：mg/kg
     */
    totalArsenic: number;
    /**
     * 总汞
     * 单位：mg/kg
     */
    totalMercury: number;
    /**
     * 总镍
     * 单位：mg/kg
     */
    totalNickel: number;
    /**
     * 检测实验室代码
     */
    labCode: string;
    /**
     * 接样日期
     */
    sampleReceiptDate: string;
    /**
     * 报告日期
     */
    reportDate: string;
    /**
     * 联系人
     */
    contactPerson: string;
    /**
     * 电话
     */
    phoneNumber: string;
};

export type CreateManySoilEnviroemtalPropertyDto = {
    bulk: Array<SoilEnviroemtalProperty>;
};

export type GetManySoilBiologicalPropertyResponseDto = {
    data: Array<SoilBiologicalProperty>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SoilBiologicalProperty = {
    /**
     * 样品编号
     */
    sampleCode: string;
    /**
     * 微生物生物量碳
     */
    microbialBiomassCarbon: number;
    /**
     * 微生物绝对丰度
     * TODO: 值域见表B.83，需根据具体规则进行验证。字典选项值参照附表“B.83”，具体数量按照《土壤生物调查技术规范》处理。
     */
    microbialAbsoluteAbundance: string;
    /**
     * 呼吸强度
     * 单位：(mg,h)
     */
    respirationIntensity: number;
    /**
     * 典型碳转化酶活性
     */
    typicalCarbonTransformingEnzymeActivity?: string;
    /**
     * 典型氮转化酶活性
     */
    typicalNitrogenTransformingEnzymeActivity?: string;
    /**
     * 典型磷转化酶活性
     */
    typicalPhosphorusTransformingEnzymeActivity?: string;
    /**
     * 微生物群落组成
     * TODO: 取值为“细菌、真菌、古菌”中的一项或多项。
     */
    microbialCommunityComposition?: '细菌' | '真菌' | '古菌';
    /**
     * 微生物群落多样性
     */
    microbialCommunityDiversity?: string;
    /**
     * 微生物功能多样性
     */
    microbialFunctionalDiversity?: string;
    /**
     * 线虫密度
     */
    nematodeDensity?: number;
    /**
     * 线虫组成
     * TODO: 取值为“植食性线虫，食细菌线虫，食真菌线虫，捕食类线虫，杂食性线虫”中的一项或多项。
     */
    nematodeComposition?: '植食性线虫' | '食细菌线虫' | '食真菌线虫' | '捕食类线虫' | '杂食性线虫';
    /**
     * 线虫多样性
     */
    nematodeDiversity?: string;
    /**
     * 蚯蚓生物量
     */
    earthwormBiomass?: string;
    /**
     * 蚯蚓组成
     * TODO: 取值为“表生型蚯蚓，内生型蚯蚓，深栖型蚯蚓”中的一项或多项。
     */
    earthwormComposition?: '表生型蚯蚓' | '内生型蚯蚓' | '深栖型蚯蚓';
    /**
     * 蚯蚓多样性
     */
    earthwormDiversity?: string;
    /**
     * 检测实验室代码
     */
    labCode: string;
    /**
     * 检测人员
     */
    tester: string;
    /**
     * 检测日期
     */
    testDate: string;
};

/**
 * 微生物群落组成
 * TODO: 取值为“细菌、真菌、古菌”中的一项或多项。
 */
export type microbialCommunityComposition = '细菌' | '真菌' | '古菌';

/**
 * 线虫组成
 * TODO: 取值为“植食性线虫，食细菌线虫，食真菌线虫，捕食类线虫，杂食性线虫”中的一项或多项。
 */
export type nematodeComposition = '植食性线虫' | '食细菌线虫' | '食真菌线虫' | '捕食类线虫' | '杂食性线虫';

/**
 * 蚯蚓组成
 * TODO: 取值为“表生型蚯蚓，内生型蚯蚓，深栖型蚯蚓”中的一项或多项。
 */
export type earthwormComposition = '表生型蚯蚓' | '内生型蚯蚓' | '深栖型蚯蚓';

export type CreateManySoilBiologicalPropertyDto = {
    bulk: Array<SoilBiologicalProperty>;
};

export type GetManyTransportationResponseDto = {
    data: Array<Transportation>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type Transportation = {
    /**
     * 样品箱号
     * 编号规则为：6位行政区代码+X+8位日期+4位流水号
     */
    sampleBoxNumber: string;
    /**
     * 样品类型
     * TODO: 值域见表B.89，需根据具体规则进行验证
     */
    sampleType: string;
    /**
     * 样品数量
     */
    sampleQuantity: number;
    /**
     * 流转环节
     */
    transferStage: 1 | 2 | 3;
    /**
     * 送达单位
     */
    recipientOrganization: string;
    /**
     * 送达期限
     */
    deliveryDeadline: string;
    /**
     * 交运单位
     */
    consignorOrganization: string;
    /**
     * 交运人
     */
    consignor: string;
    /**
     * 联系方式
     */
    contactInformation: string;
    /**
     * 交运日期
     */
    consignmentDate: string;
    /**
     * 承运单位
     */
    carrierOrganization: string;
    /**
     * 运输负责人
     */
    transportResponsiblePerson?: string;
    /**
     * 运输车（船）号牌
     */
    transportVehicleNumberPlate?: string;
};

/**
 * 流转环节
 */
export type transferStage = 1 | 2 | 3;

export type CreateManyTransportationDto = {
    bulk: Array<Transportation>;
};

export type GetManyTransportationInventoryResponseDto = {
    data: Array<TransportationInventory>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type TransportationInventory = {
    /**
     * 序号
     */
    serialNumber: number;
    /**
     * 样品编号
     */
    sampleCode: string;
    /**
     * 样品箱号
     */
    sampleBoxNumber: string;
    /**
     * 保存方式
     * TODO: 字段取值为“1=常温、2=低温、3=避光”中的一项
     */
    storageMethod: 1 | 2 | 3;
    /**
     * 有无措施防止沾污
     * TODO: 字段取值为“1=有、0=无”中的一项
     */
    contaminationPreventionMeasure: 1 | 0;
    /**
     * 有无措施防止破损
     * TODO: 字段取值为“1=有、0=无”中的一项
     */
    damagePreventionMeasure: string;
};

/**
 * 保存方式
 * TODO: 字段取值为“1=常温、2=低温、3=避光”中的一项
 */
export type storageMethod = 1 | 2 | 3;

/**
 * 有无措施防止沾污
 * TODO: 字段取值为“1=有、0=无”中的一项
 */
export type contaminationPreventionMeasure = 1 | 0;

export type CreateManyTransportationInventoryDto = {
    bulk: Array<TransportationInventory>;
};

export type GetManySampleReceiptResponseDto = {
    data: Array<SampleReceipt>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SampleReceipt = {
    /**
     * 样品箱号
     */
    sampleBoxNumber: string;
    /**
     * 样品类型
     * TODO: 值域见表B.89
     */
    sampleType: string;
    /**
     * 样品数量
     */
    sampleQuantity: number;
    /**
     * 流转环节
     * TODO: 字段取值为“1=采样-制备、2=制备-检测、3=制备-样品库、4=质控-制备”中的一项
     */
    transferStage: 1 | 2 | 3 | 4;
    /**
     * 送样单位
     */
    senderUnit: string;
    /**
     * 送样人
     */
    senderName: string;
    /**
     * 送样日期
     */
    sendingDate: string;
    /**
     * 送样联系方式
     */
    senderContact: string;
    /**
     * 收样单位
     */
    receiverUnit: string;
    /**
     * 收样人
     */
    receiverName: string;
    /**
     * 收样日期
     */
    receivingDate: string;
    /**
     * 收样联系方式
     */
    receiverContact: string;
};

/**
 * 流转环节
 * TODO: 字段取值为“1=采样-制备、2=制备-检测、3=制备-样品库、4=质控-制备”中的一项
 */
export type transferStage2 = 1 | 2 | 3 | 4;

export type CreateManySampleReceiptDto = {
    bulk: Array<SampleReceipt>;
};

export type GetManySampleReceiptInventoryResponseDto = {
    data: Array<SampleReceiptInventory>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SampleReceiptInventory = {
    /**
     * 序号
     */
    id: number;
    /**
     * 样品编号
     */
    sampleNumber: string;
    /**
     * 样品箱号
     */
    sampleBoxNumber: string;
    /**
     * 样品重量是否符合要求
     * TODO: 字段取值为“1=符合、0=不符合”中的一项
     */
    weightCompliant: string;
    /**
     * 样品包装容器是否完好
     * TODO: 字段取值为“1=完好、0=损坏”中的一项
     */
    packagingIntact: string;
    /**
     * 样品标签是否完好整洁
     * TODO: 字段取值为“1=完好、0=损坏”中的一项
     */
    labelIntactAndClean: string;
    /**
     * 保存方法是否符合要求
     * TODO: 字段取值为“1=符合、0=不符合”中的一项
     */
    storageMethodCompliant: string;
};

export type CreateManySampleReceiptInventoryDto = {
    bulk: Array<SampleReceiptInventory>;
};

export type GetManyQualityControlSampleResponseDto = {
    data: Array<QualityControlSample>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type QualityControlSample = {
    /**
     * 质控样编号
     * 编码规则：8位质控实验室代码+YP+2位批号+5位顺序号
     */
    qcSampleNumber: number;
    /**
     * 省份
     */
    province: string;
    /**
     * 质控实验室代码
     */
    qcLabCode: string;
    /**
     * 质控样研制单位
     */
    qcSamplePreparationUnit: string;
    /**
     * 有效期
     */
    expirationDate: string;
    /**
     * pH
     */
    ph: number;
    /**
     * 可交换酸度
     */
    exchangeableAcidity?: number;
    /**
     * 阳离子交换量
     * 单位：cmol(+)/kg
     */
    cationExchangeCapacity: number;
    /**
     * 交换性盐基总量
     * 单位：cmol(+)/kg
     */
    exchangeableBaseCations: number;
    /**
     * 交换性钙
     * 单位：cmol(+)/kg
     */
    exchangeableCalcium: number;
    /**
     * 交换性镁
     * 单位：cmol(+)/kg
     */
    exchangeableMagnesium: number;
    /**
     * 交换性钠
     * 单位：cmol(+)/kg
     */
    exchangeableSodium: number;
    /**
     * 盐基总量
     * 单位：cmol(+)/kg
     */
    totalBaseCations: number;
    /**
     * 水溶性盐总量
     * 单位：g/kg
     */
    waterSolubleSaltContent: number;
    /**
     * 电导率
     * 单位：mS/cm
     */
    electricalConductivity: number;
    /**
     * 水溶性钠离子
     * 单位：cmol(Na+)/kg
     */
    waterSolubleSodiumIon: number;
    /**
     * 水溶性钾离子
     * 单位：cmol(K+)/kg
     */
    waterSolublePotassiumIon: number;
    /**
     * 水溶性钙离子
     * 单位：cmol(1/2Ca2+)/kg
     */
    waterSolubleCalciumIon: number;
    /**
     * 水溶性镁离子
     * 单位：cmol(1/2Mg2+)/kg
     */
    waterSolubleMagnesiumIon: number;
    /**
     * 水溶性碳酸根
     * 单位：cmol(1/2CO32-)/kg
     */
    waterSolubleCarbonateIon: number;
    /**
     * 水溶性碳酸氢根
     * 单位：cmol(HCO3-)/kg
     */
    waterSolubleBicarbonateIon: number;
    /**
     * 水溶性硫酸根
     * 单位：cmol(1/2SO42-)/kg
     */
    waterSolubleSulfateIon: number;
    /**
     * 水溶性氯根
     * 单位：cmol(Cl-)/kg
     */
    waterSolubleChlorideIon: number;
    /**
     * 有机质
     * 单位：g/kg
     */
    organicMatter: number;
    /**
     * 全氮
     * 单位：g/kg
     */
    totalNitrogen: number;
    /**
     * 全磷
     * 单位：g/kg
     */
    totalPhosphorus: number;
    /**
     * 全钾
     * 单位：g/kg
     */
    totalPotassium: number;
    /**
     * 全硫
     * 需根据具体规则进行验证。
     * 单位：g/kg
     */
    totalSulfur?: number;
    /**
     * 全硼
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    totalBoron?: number;
    /**
     * 全硒
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    totalSelenium?: number;
    /**
     * 全铁
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    totalIron?: number;
    /**
     * 全锰
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    totalManganese?: number;
    /**
     * 全铜
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    totalCopper?: number;
    /**
     * 全锌
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    totalZinc?: number;
    /**
     * 全钼
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    totalMolybdenum?: number;
    /**
     * 全铝
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    totalAluminum?: number;
    /**
     * 全硅
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    totalSilicon?: number;
    /**
     * 全钙
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    totalCalcium?: number;
    /**
     * 全镁
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    totalMagnesium?: number;
    /**
     * 有效磷
     * 单位：mg/kg
     */
    availablePhosphorus: number;
    /**
     * 缓效钾
     * 单位：mg/kg
     */
    slowReleasePotassium: number;
    /**
     * 速效钾
     * 单位：mg/kg
     */
    quickReleasePotassium: number;
    /**
     * 有效硫
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    availableSulfur?: number;
    /**
     * 有效硅
     * 需根据具体规则进行验证。
     * 单位：mg/kg
     */
    availableSilicon?: number;
    /**
     * 有效铁
     * 单位：mg/kg
     */
    availableIron: number;
    /**
     * 有效锰
     * 单位：mg/kg
     */
    availableManganese: number;
    /**
     * 有效铜
     * 单位：mg/kg
     */
    availableCopper: number;
    /**
     * 有效锌
     * 单位：mg/kg
     */
    availableZinc: number;
    /**
     * 有效硼
     * 单位：mg/kg
     */
    availableBoron: number;
    /**
     * 有效钼
     * 单位：mg/kg
     */
    availableMolybdenum: number;
    /**
     * 游离铁
     * 需根据具体规则进行验证。
     * 单位：g/kg
     */
    freeIronOxide?: number;
    /**
     * 总汞 (单位：mg/kg)
     */
    totalMercury: number;
    /**
     * 总砷 (单位：mg/kg)
     */
    totalArsenic: number;
    /**
     * 总铅 (单位：mg/kg)
     */
    totalLead: number;
    /**
     * 总镉 (单位：mg/kg)
     */
    totalCadmium: number;
    /**
     * 总铬 (单位：mg/kg)
     */
    totalChromium: number;
    /**
     * 总镍 (单位：mg/kg)
     */
    totalNickel: number;
};

export type CreateManyQualityControlSampleDto = {
    bulk: Array<QualityControlSample>;
};

export type GetManySampleRepositoryResponseDto = {
    data: Array<SampleRepository>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type SampleRepository = {
    /**
     * 样品编号
     */
    sampleNumber: number;
    /**
     * 样点编号
     */
    samplePointNumber: string;
    /**
     * 坐落位置
     */
    location: string;
    /**
     * 土地利用类型
     * TODO: 依据《第三次全国国土调查技术规程》附录A 第三次全国国土调查工作分类执行,填写最末级分类
     */
    landUseType: string;
    /**
     * 土壤类型编码
     */
    soilTypeCode: string;
    /**
     * 土类
     */
    soilClass: string;
    /**
     * 亚类
     */
    soilSubClass: string;
    /**
     * 土属
     */
    soilGroup?: string;
    /**
     * 土种
     */
    soilFamily?: string;
    /**
     * 剖面深度
     */
    profileDepth?: string;
    /**
     * 标本类型
     */
    specimenType?: string;
    /**
     * 入库日期
     */
    storageDate: string;
    /**
     * 入库人
     */
    storagePerson: string;
    /**
     * 存放地点
     */
    storageLocation: string;
    /**
     * 存放架
     */
    storageShelf: string;
    /**
     * 存放柜
     */
    storageCabinet: string;
    /**
     * 存放层
     */
    storageLayer: string;
    /**
     * 存放行
     */
    storageRow: string;
    /**
     * 存放列
     */
    storageColumn: string;
};

export type CreateManySampleRepositoryDto = {
    bulk: Array<SampleRepository>;
};

export type GetManyTestingLabResponseDto = {
    data: Array<TestingLab>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type TestingLab = {
    /**
     * 检测实验室代码
     */
    labCode: number;
    /**
     * 检测实验室名称
     */
    labName: string;
    /**
     * 耕地质量标准化验室证书编号
     */
    standardizedLabCertificateNumber?: string;
    /**
     * 单位地址
     */
    address: string;
    /**
     * 质量控制措施
     */
    qualityControlMeasures: string;
    /**
     * 标准物质需求量
     * 单位：千克/年
     */
    standardMaterialDemand: number;
    /**
     * 参比物质需求量
     * 单位：千克/年
     */
    referenceMaterialDemand: number;
    /**
     * 检测资质
     * TODO: 选择其它时，需要在备注项中描述说明具体资质
     */
    certification: '无相关资质' | '计量认证' | '农业部部级质检机构审查认可' | '农产品质量安全检测机构' | '其他';
    /**
     * 基础条件
     */
    basicConditions: string;
    /**
     * 检测能力
     */
    testingCapability: 'JXZC' | 'TRSWXDTJ' | 'PH' | 'KJHSD' | 'YLZJHL' | 'JHXYJJ' | 'SRXY' | 'OM' | 'TN' | 'TP' | 'TK' | 'TS' | 'TB' | 'TSE' | 'TFE' | 'TMN' | 'TCU' | 'TZN' | 'TMO' | 'TAL' | 'TSI' | 'TCA' | 'TMG' | 'AP' | 'SK' | 'AK' | 'AS' | 'ASI' | 'AFE' | 'AMN' | 'ACU' | 'AZN' | 'AB' | 'AMO' | 'HG' | 'AS2' | 'PB' | 'CD' | 'CR' | 'NI';
    /**
     * 检测样品类别
     * TODO: 参考本表注3的值域
     */
    sampleCategories?: '土壤' | '肥料' | '农产品' | '其他';
    /**
     * 检测工作范围
     */
    workScope: string;
    /**
     * 备注
     */
    remarks?: string;
};

/**
 * 检测资质
 * TODO: 选择其它时，需要在备注项中描述说明具体资质
 */
export type certification = '无相关资质' | '计量认证' | '农业部部级质检机构审查认可' | '农产品质量安全检测机构' | '其他';

/**
 * 检测能力
 */
export type testingCapability = 'JXZC' | 'TRSWXDTJ' | 'PH' | 'KJHSD' | 'YLZJHL' | 'JHXYJJ' | 'SRXY' | 'OM' | 'TN' | 'TP' | 'TK' | 'TS' | 'TB' | 'TSE' | 'TFE' | 'TMN' | 'TCU' | 'TZN' | 'TMO' | 'TAL' | 'TSI' | 'TCA' | 'TMG' | 'AP' | 'SK' | 'AK' | 'AS' | 'ASI' | 'AFE' | 'AMN' | 'ACU' | 'AZN' | 'AB' | 'AMO' | 'HG' | 'AS2' | 'PB' | 'CD' | 'CR' | 'NI';

/**
 * 检测样品类别
 * TODO: 参考本表注3的值域
 */
export type sampleCategories = '土壤' | '肥料' | '农产品' | '其他';

export type CreateManyTestingLabDto = {
    bulk: Array<TestingLab>;
};

export type GetManyQualityControlLabResponseDto = {
    data: Array<QualityControlLab>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type QualityControlLab = {
    /**
     * 质控实验室代码
     * TODO: 质控实验室代码编码规则：2位省级代码+ZK+4位顺序号
     */
    labCode: number;
    /**
     * 质控实验室名称
     */
    labName: string;
    /**
     * 质控工作范围
     */
    workScope: string;
    /**
     * 负责人
     */
    responsiblePerson: string;
    /**
     * 联系人
     */
    contactPerson: string;
    /**
     * 联系电话
     */
    contactNumber: string;
    /**
     * 地址
     */
    address: string;
    /**
     * 推荐部门
     */
    recommendingDepartment?: string;
};

export type CreateManyQualityControlLabDto = {
    bulk: Array<QualityControlLab>;
};

export type GetManyPersonnelResponseDto = {
    data: Array<Personnel>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type Personnel = {
    /**
     * 人员代码
     * TODO: 编码规则：1位人员类型+7位顺序号
     */
    personnelCode: number;
    /**
     * 人员类型
     * TODO: 值域见表注2
     * 可多选：1=检测人员、2=采样人员、3=质控人员、4=技术专家、5=省级管理人员、6=国家管理人员、9=其他人员
     */
    personnelType: 1 | 2 | 3 | 4 | 5 | 6 | 9;
    /**
     * 姓名
     */
    name: string;
    /**
     * 单位
     */
    organization: string;
    /**
     * 电话
     */
    phone: string;
    /**
     * 邮箱
     */
    email: string;
    /**
     * 通讯地址
     */
    address: string;
    /**
     * 人员简介
     */
    bio: string;
    /**
     * 职称
     * 选项：4=正高级、3=副高级、2=中级职称、1=初级、9=其它
     */
    title?: 1 | 2 | 3 | 4 | 9;
    /**
     * 学历
     * 选项：4=硕士及以上、3=本科、2=大专、1=中专、9=其它
     */
    education?: 1 | 2 | 3 | 4 | 9;
    /**
     * 工作经历
     * 选项：4=5年以上、3=3-5年、2=1-3年、1=少于1年
     */
    workExperience?: 1 | 2 | 3 | 4;
    /**
     * 所属机构代码
     */
    affiliatedOrganizationCode?: string;
};

/**
 * 人员类型
 * TODO: 值域见表注2
 * 可多选：1=检测人员、2=采样人员、3=质控人员、4=技术专家、5=省级管理人员、6=国家管理人员、9=其他人员
 */
export type personnelType = 1 | 2 | 3 | 4 | 5 | 6 | 9;

/**
 * 职称
 * 选项：4=正高级、3=副高级、2=中级职称、1=初级、9=其它
 */
export type title = 1 | 2 | 3 | 4 | 9;

/**
 * 学历
 * 选项：4=硕士及以上、3=本科、2=大专、1=中专、9=其它
 */
export type education = 1 | 2 | 3 | 4 | 9;

/**
 * 工作经历
 * 选项：4=5年以上、3=3-5年、2=1-3年、1=少于1年
 */
export type workExperience = 1 | 2 | 3 | 4;

export type CreateManyPersonnelDto = {
    bulk: Array<Personnel>;
};

export type GetManyDataIdInfoResponseDto = {
    data: Array<DataIdInfo>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type DataIdInfo = {
    /**
     * 名称 - 数据集名称
     * 最大出现次数: 1
     */
    title: string;
    /**
     * 日期 - 数据集发布或最近更新日期
     * 格式: YYYYMMDD
     * 最大出现次数: 1
     */
    date: string;
    /**
     * 行政区代码 - 定位名称的唯一标识
     * TODO: 按照GB/T 2260的6位数字码
     * 最大出现次数: 1
     */
    geoID: string;
    /**
     * 版本 - 数据集的版本
     * 可选字段 - 数据集有新版本？
     * 最大出现次数: 1
     */
    dataEdition?: string;
    /**
     * 语种 - 数据集使用的语种
     * TODO: 按照GB/T4880用两位小写字母表示
     * 可多选字段
     */
    dataLang: Array<(string)>;
    /**
     * 摘要 - 数据集内容的概要说明
     * 最大出现次数: 1
     * 300字左右的自由文本
     */
    idAbs: string;
    /**
     * 现状 - 数据集的现状
     * 最大出现次数: 1
     * 值域: 001.完成；002.作废；003.连续更新；004.正在建设中
     */
    status: string;
    /**
     * 终止时间 - 数据集原始数据生成或采集的终止时间
     * 格式: YYYYMMDD
     * 最大出现次数: 1
     */
    ending: string;
    /**
     * 负责单位名称 - 数据集负责单位名称
     * 最大出现次数: 1
     */
    rpOrgName: string;
    /**
     * 联系人 - 数据集负责单位联系人姓名
     * 最大出现次数: 1
     */
    rpCnt: string;
    /**
     * 电话 - 数据集负责单位或联系人的电话号码
     * 可多选字段
     */
    voiceNum: Array<(string)>;
    /**
     * 传真 - 数据集负责单位或联系人的传真号码
     * 可选字段
     */
    faxNum?: Array<(string)>;
    /**
     * 通信地址 - 数据集负责单位或联系人的通信地址
     * 最大出现次数: 1
     */
    cntAddress: string;
    /**
     * 邮政编码 - 数据集负责单位邮政编码
     * 最大出现次数: 1
     */
    cntCode: string;
    /**
     * 电子信箱地址 - 数据集负责单位或联系人的电子信箱地址
     * 可选字段
     */
    cntEmail?: Array<(string)>;
    /**
     * 安全等级代码 - 出于国家安全、保密或其他考虑，对数据集安全限制的等级名称
     * 最大出现次数: 1
     * 值域: 001.绝密；002.机密；003.秘密；004.限制；005.内部；006.无限制
     */
    classCode: string;
};

export type CreateManyDataIdInfoDto = {
    bulk: Array<DataIdInfo>;
};

export type GetManyRefSysInfoResponseDto = {
    data: Array<RefSysInfo>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type RefSysInfo = {
    /**
     * 大地坐标参照系统名称 - 大地坐标参照系统名称
     * 最大出现次数: 1
     * 采用2000国家大地坐标系
     */
    coorRSID: string;
    /**
     * 中央经线 - 中央经线参数信息
     * 最大出现次数: 1
     * 单位: 度
     */
    centralMer: number;
    /**
     * 东偏移 - 东偏移参数信息
     * 最大出现次数: 1
     * 单位: 千米
     */
    eastFAL: number;
    /**
     * 北偏移 - 北偏移参数信息
     * 最大出现次数: 1
     * 单位: 千米
     */
    northFAL: number;
    /**
     * 分带方式 - 说明分带宽度
     * 最大出现次数: 1
     * 值域: 001. 1.5°；002. 3°
     */
    coorFDKD: string;
};

export type CreateManyRefSysInfoDto = {
    bulk: Array<RefSysInfo>;
};

export type GetManyContInfoResponseDto = {
    data: Array<ContInfo>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type ContInfo = {
    id: number;
    /**
     * 图层名称 - 数据集所包含的图层名称
     * 最大出现次数: N
     * 类型: 字符型，自由文本
     */
    layName: string;
    /**
     * 数据集要素类型名称 - 具有同类属性的要素类名称
     * 最大出现次数: N
     * 类型: 字符型，自由文本
     */
    catFetTyps: string;
    /**
     * 与数据集要素类名称对应的主要属性列表 - 要素类主要属性内容的文字表述
     * 最大出现次数: N
     * 类型: 字符型，自由文本
     */
    attrTypList: string;
    /**
     * 数据量 - 数据集所占存储空间的大小
     * 最大出现次数: 1
     * 类型: 字符型，自由文本
     */
    capacity?: string;
};

export type CreateManyContInfoDto = {
    bulk: Array<ContInfo>;
};

export type GetManyDqInfoResponseDto = {
    data: Array<DqInfo>;
    count: number;
    total: number;
    page: number;
    pageCount: number;
};

export type DqInfo = {
    id: number;
    /**
     * 数据质量概述 - 数据集质量的定性和定量的概括说明
     * 最大出现次数: 1
     * 类型: 字符型，自由文本
     */
    dqStatement: string;
    /**
     * 数据志 - 数据生产过程中数据源、处理过程（算法与参数）等的说明信息
     * 最大出现次数: 1
     * 类型: 字符型，自由文本
     */
    dqLineage: string;
};

export type CreateManyDqInfoDto = {
    bulk: Array<DqInfo>;
};

export type PasswordLoginDto = {
    username: string;
    password: string;
};

export type CreateRoleDto = {
    [key: string]: unknown;
};

export type UpdateRoleDto = {
    [key: string]: unknown;
};

export type GetHelloResponse = (string);

export type GetHelloError = unknown;

export type RegisterData = {
    body: CreateUserDto;
};

export type RegisterResponse = (User);

export type RegisterError = unknown;

export type GetOneData = {
    path: {
        id: number;
    };
    query?: {
        /**
         * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
         */
        cache?: number;
        /**
         * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
         */
        fields?: Array<(string)>;
        /**
         * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
         */
        join?: Array<(string)>;
    };
};

export type GetOneResponse = (User);

export type GetOneError = unknown;

export type UpdateOneData = {
    body: User;
    path: {
        id: number;
    };
};

export type UpdateOneResponse = (User);

export type UpdateOneError = unknown;

export type ReplaceOneData = {
    body: User;
    path: {
        id: number;
    };
};

export type ReplaceOneResponse = (User);

export type ReplaceOneError = unknown;

export type DeleteOneData = {
    path: {
        id: number;
    };
};

export type DeleteOneResponse = (unknown);

export type DeleteOneError = unknown;

export type GetManyData = {
    query?: {
        /**
         * Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a>
         */
        cache?: number;
        /**
         * Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a>
         */
        fields?: Array<(string)>;
        /**
         * Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a>
         */
        filter?: Array<(string)>;
        /**
         * Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a>
         */
        join?: Array<(string)>;
        /**
         * Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a>
         */
        limit?: number;
        /**
         * Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a>
         */
        offset?: number;
        /**
         * Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a>
         */
        or?: Array<(string)>;
        /**
         * Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a>
         */
        page?: number;
        /**
         * Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a>
         */
        s?: string;
        /**
         * Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a>
         */
        sort?: Array<(string)>;
    };
};

export type GetManyResponse = ((GetManyUserResponseDto | Array<User>));

export type GetManyError = unknown;

export type CreateOneData = {
    body: User;
};

export type CreateOneResponse = (User);

export type CreateOneError = unknown;

export type CreateManyData = {
    body: CreateManyUserDto;
};

export type CreateManyResponse = (Array<User>);

export type CreateManyError = unknown;

export type FooResponse = (string);

export type FooError = unknown;

export type LoginData = {
    body: PasswordLoginDto;
};

export type LoginResponse = (unknown);

export type LoginError = unknown;

export type GetProfileResponse = ({
    [key: string]: unknown;
});

export type GetProfileError = unknown;

export type TestResponse = ({
    [key: string]: unknown;
});

export type TestError = unknown;

export type CreateData = {
    body: CreateRoleDto;
};

export type CreateResponse = (string);

export type CreateError = unknown;

export type FindAllResponse = (string);

export type FindAllError = unknown;

export type FindOneData = {
    path: {
        id: string;
    };
};

export type FindOneResponse = (string);

export type FindOneError = unknown;

export type UpdateData = {
    body: UpdateRoleDto;
    path: {
        id: string;
    };
};

export type UpdateResponse = (string);

export type UpdateError = unknown;

export type RemoveData = {
    path: {
        id: string;
    };
};

export type RemoveResponse = (string);

export type RemoveError = unknown;

export type GetDictData = {
    path: {
        entity: string;
    };
};

export type GetDictResponse = ({
    [key: string]: unknown;
});

export type GetDictError = unknown;

export type GetAllResponse = (Array<(string)>);

export type GetAllError = unknown;

export type FindData = {
    path: {
        id: number;
        type: string;
    };
};

export type FindResponse = ({
    [key: string]: unknown;
});

export type FindError = unknown;

export type UploadFileResponse = (unknown);

export type UploadFileError = unknown;

export type GetFileData = {
    path: {
        key: string;
    };
};

export type GetFileResponse = (unknown);

export type GetFileError = unknown;