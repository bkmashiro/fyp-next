// This file is auto-generated by @hey-api/openapi-ts

export const $CreateUserDto = {
    type: 'object',
    properties: {
        username: {
            type: 'string',
            minLength: 1,
            maxLength: 20
        },
        password: {
            type: 'string',
            minLength: 1,
            maxLength: 32
        }
    },
    required: ['username', 'password']
} as const;

export const $GetManyUserResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $Role = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        name: {
            type: 'string'
        },
        user: {
            '$ref': '#/components/schemas/User'
        }
    },
    required: ['id', 'name', 'user']
} as const;

export const $User = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        username: {
            type: 'string'
        },
        password: {
            type: 'string'
        },
        roles: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Role'
            }
        }
    },
    required: ['id', 'username', 'password', 'roles']
} as const;

export const $CreateManyUserDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/User'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyCropYieldLevelResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CropYieldLevel'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $CropYieldLevel = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'string',
            description: '要素代码'
        },
        cropType: {
            type: 'string',
            description: '作物类型'
        },
        cropYield: {
            type: 'number',
            description: '作物产量',
            minimum: 1
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'cropType', 'cropYield']
} as const;

export const $CreateManyCropYieldLevelDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CropYieldLevel'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyCroppingSystemResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CroppingSystem'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $CroppingSystem = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'string',
            description: '要素代码'
        },
        area: {
            type: 'number',
            description: '面积',
            minimum: 1
        },
        croppingSystem: {
            type: 'string',
            description: '熟制'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'area', 'croppingSystem']
} as const;

export const $CreateManyCroppingSystemDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CroppingSystem'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyDominantVegetationSpeciesResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DominantVegetationSpecies'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $DominantVegetationSpecies = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'string',
            description: '要素代码'
        },
        vegetationType: {
            type: 'string',
            description: '植被类型'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'vegetationType']
} as const;

export const $CreateManyDominantVegetationSpeciesDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DominantVegetationSpecies'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyLandUsageResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LandUsage'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $LandUsage = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '边界'
        },
        id: {
            type: 'string',
            description: '标识码'
        },
        elementCode: {
            type: 'object',
            description: '要素代码'
        },
        plotNumber: {
            type: 'string',
            description: '图斑编号'
        },
        landClassCode: {
            type: 'string',
            description: '地类编码'
        },
        landClassName: {
            type: 'string',
            description: '地类名称'
        },
        locationUnitCode: {
            type: 'string',
            description: '坐落单位代码'
        },
        locationUnitName: {
            type: 'string',
            description: '坐落单位名称'
        },
        plotArea: {
            type: 'number',
            description: '图斑面积',
            minimum: 1
        },
        slopeLevel: {
            type: 'string',
            description: '坡度级别'
        },
        arableLandQualityGrade: {
            type: 'string',
            description: '耕地地力等级'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'plotNumber', 'landClassCode', 'landClassName', 'locationUnitCode', 'locationUnitName', 'plotArea', 'slopeLevel', 'arableLandQualityGrade', 'remark']
} as const;

export const $CreateManyLandUsageDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/LandUsage'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyPlantingStructureResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PlantingStructure'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $PlantingStructure = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'string',
            description: '要素代码'
        },
        area: {
            type: 'number',
            description: '面积',
            minimum: 1
        },
        plantingType: {
            type: 'string',
            description: '种植类型'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'area', 'plantingType']
} as const;

export const $CreateManyPlantingStructureDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PlantingStructure'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySlopeMapResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SlopeMap'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SlopeMap = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '边界'
        },
        id: {
            type: 'string',
            description: '标识码'
        },
        elementCode: {
            type: 'string',
            description: '要素代码'
        },
        slopeGrade: {
            type: 'string',
            description: '坡度级别'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'slopeGrade']
} as const;

export const $CreateManySlopeMapDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SlopeMap'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySoilTypeResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilType'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SoilType = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'object',
            description: '要素代码'
        },
        soilClass: {
            type: 'string',
            description: '土类'
        },
        soilSubclass: {
            type: 'string',
            description: '亚类'
        },
        soilFamily: {
            type: 'string',
            description: '土属'
        },
        soilSeries: {
            type: 'string',
            description: '土种'
        },
        area: {
            type: 'number',
            description: '面积',
            minimum: 1
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'soilClass', 'soilSubclass', 'soilFamily', 'soilSeries', 'area', 'remark']
} as const;

export const $CreateManySoilTypeDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilType'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyBoundaryResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Boundary'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $Boundary = {
    type: 'object',
    properties: {
        line: {
            type: 'object',
            description: '界线'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'object',
            description: '要素代码'
        },
        boundaryType: {
            type: 'object',
            description: '界线类型'
        },
        boundaryNature: {
            type: 'object',
            description: '界线性质'
        },
        boundaryDescription: {
            type: 'string',
            description: '界线说明',
            minimum: 1
        }
    },
    required: ['line', 'id', 'elementCode', 'boundaryType', 'boundaryNature', 'boundaryDescription']
} as const;

export const $CreateManyBoundaryDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Boundary'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyCountyResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/County'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $County = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '行政区边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'object',
            description: '要素代码'
        },
        name: {
            type: 'string',
            description: '行政区名称'
        },
        code: {
            type: 'string',
            description: '行政区代码'
        },
        area: {
            type: 'number',
            description: '行政区面积',
            minimum: 1
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'name', 'code', 'area', 'remark']
} as const;

export const $CreateManyCountyDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/County'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyPrefectureResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Prefecture'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $Prefecture = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '行政区边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'object',
            description: '要素代码'
        },
        name: {
            type: 'string',
            description: '行政区名称'
        },
        code: {
            type: 'string',
            description: '行政区代码'
        },
        area: {
            type: 'number',
            description: '行政区面积',
            minimum: 1
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'name', 'code', 'area', 'remark']
} as const;

export const $CreateManyPrefectureDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Prefecture'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyProvinceResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Province'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $Province = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '行政区边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'object',
            description: '要素代码'
        },
        name: {
            type: 'string',
            description: '行政区名称'
        },
        code: {
            type: 'string',
            description: '行政区代码'
        },
        area: {
            type: 'number',
            description: '行政区面积',
            minimum: 1
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'name', 'code', 'area', 'remark']
} as const;

export const $CreateManyProvinceDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Province'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyTownshipResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Township'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $Township = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '行政区边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'object',
            description: '要素代码'
        },
        name: {
            type: 'string',
            description: '行政区名称'
        },
        code: {
            type: 'string',
            description: '行政区代码'
        },
        area: {
            type: 'number',
            description: `行政区面积

@notice 单位：m²`,
            minimum: 1
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'name', 'code', 'area', 'remark']
} as const;

export const $CreateManyTownshipDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Township'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyVilliageResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Villiage'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $Villiage = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '行政区边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'object',
            description: '要素代码'
        },
        name: {
            type: 'string',
            description: '行政区名称'
        },
        code: {
            type: 'string',
            description: '行政区代码'
        },
        area: {
            type: 'number',
            description: `行政区面积

@notice 单位：m²`,
            minimum: 1
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'name', 'code', 'area', 'remark']
} as const;

export const $CreateManyVilliageDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Villiage'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyRasterMapResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RasterMap'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $RasterMap = {
    type: 'object',
    properties: {
        raster: {
            type: 'object',
            description: '栅格数据'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'object',
            description: '要素代码'
        },
        mapSheetNumber: {
            type: 'string',
            description: '图幅编号'
        },
        mapSheetName: {
            type: 'string',
            description: '图幅名称'
        },
        dataType: {
            type: 'string',
            description: '数据类型',
            enum: ['数字正射影像图', '数字栅格地图', '数字高程模型', '其他栅格数据']
        },
        headerFileName: {
            type: 'string',
            description: '头文件名'
        },
        dataFileName: {
            type: 'string',
            description: '数据文件名'
        },
        metadataFileName: {
            type: 'string',
            description: '元数据文件名'
        },
        imageSource: {
            type: 'string',
            description: '影像来源'
        },
        imageResolution: {
            type: 'string',
            description: '影像分辨率'
        },
        elevationDatum: {
            type: 'string',
            description: '高程基准'
        },
        terrainCategory: {
            type: 'string',
            description: '地形类别'
        },
        mapScale: {
            type: 'string',
            description: '成图比例尺'
        },
        coordinateSystemType: {
            type: 'string',
            description: '坐标系统类型'
        },
        mapProjection: {
            type: 'string',
            description: '大地平面坐标投影'
        },
        centralMeridianLongitude: {
            type: 'number',
            description: '中央经线经度'
        },
        lowerLeftX: {
            type: 'number',
            description: '左下角X坐标'
        },
        lowerLeftY: {
            type: 'number',
            description: '左下角Y坐标'
        },
        upperRightX: {
            type: 'number',
            description: '右上角X坐标'
        },
        upperRightY: {
            type: 'number',
            description: '右上角Y坐标'
        },
        captureDate: {
            format: 'date-time',
            type: 'string',
            description: '拍摄时间'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['raster', 'id', 'elementCode', 'mapSheetNumber', 'mapSheetName', 'dataType', 'headerFileName', 'dataFileName', 'metadataFileName', 'imageSource', 'imageResolution', 'elevationDatum', 'terrainCategory', 'mapScale', 'coordinateSystemType', 'mapProjection', 'centralMeridianLongitude', 'lowerLeftX', 'lowerLeftY', 'upperRightX', 'upperRightY', 'captureDate', 'remark']
} as const;

export const $CreateManyRasterMapDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RasterMap'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySamplingAreaResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamplingArea'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SamplingArea = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'string',
            description: '要素代码'
        },
        landUseType: {
            type: 'string',
            description: '土地利用类型'
        },
        slopeGrade: {
            type: 'string',
            description: '坡度级别'
        },
        soilCategory: {
            type: 'string',
            description: '土类'
        },
        subCategory: {
            type: 'string',
            description: '亚类'
        },
        soilGenus: {
            type: 'string',
            description: '土属'
        },
        soilSpecies: {
            type: 'string',
            description: '土种'
        },
        longitude: {
            type: 'number',
            description: '中心点经度',
            minimum: 72,
            maximum: 136
        },
        latitude: {
            type: 'number',
            description: '中心点纬度',
            minimum: 0,
            maximum: 60
        },
        area: {
            type: 'number',
            description: '面积',
            minimum: 1
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'landUseType', 'slopeGrade', 'soilCategory', 'subCategory', 'soilGenus', 'soilSpecies', 'longitude', 'latitude', 'area']
} as const;

export const $CreateManySamplingAreaDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamplingArea'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySamplingGridResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamplingGrid'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SamplingGrid = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'string',
            description: '要素代码'
        },
        gridSize: {
            type: 'string',
            description: '网格大小'
        },
        longitudeBottomLeft: {
            type: 'number',
            description: '左下角经度'
        },
        latitudeBottomLeft: {
            type: 'number',
            description: '左下角纬度'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['border', 'id', 'elementCode', 'gridSize', 'longitudeBottomLeft', 'latitudeBottomLeft']
} as const;

export const $CreateManySamplingGridDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamplingGrid'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySamplingPointResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamplingPoint'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SamplingPoint = {
    type: 'object',
    properties: {
        point: {
            type: 'object',
            description: '坐标点'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'string',
            description: '要素代码'
        },
        samplePointCode: {
            type: 'string',
            description: '样点编号'
        },
        samplePointCategory: {
            type: 'string',
            description: '样点类别'
        },
        samplingType: {
            type: 'string',
            description: '采样类型'
        },
        isWaterStableAggregateCollected: {
            type: 'string',
            description: '是否采集水稳性大团聚体'
        },
        locationUnitCode: {
            type: 'string',
            description: '坐落单位代码'
        },
        locationUnitName: {
            type: 'string',
            description: '坐落单位名称'
        },
        longitude: {
            type: 'number',
            description: '经度'
        },
        latitude: {
            type: 'number',
            description: '纬度'
        },
        slope: {
            type: 'string',
            description: '坡度'
        },
        landUseType: {
            type: 'string',
            description: '土地利用类型'
        },
        soilTypeCode: {
            type: 'string',
            description: '土壤类型编码'
        },
        soilCategory: {
            type: 'string',
            description: '土类'
        },
        soilSubCategory: {
            type: 'string',
            description: '亚类'
        },
        soilGroup: {
            type: 'string',
            description: '土属'
        },
        soilSubGroup: {
            type: 'string',
            description: '土种'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['point', 'id', 'elementCode', 'samplePointCode', 'samplePointCategory', 'samplingType', 'isWaterStableAggregateCollected', 'locationUnitCode', 'locationUnitName', 'longitude', 'latitude', 'slope', 'landUseType', 'soilCategory', 'soilSubCategory', 'soilGroup', 'soilSubGroup']
} as const;

export const $CreateManySamplingPointDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamplingPoint'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySurveyedPointResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SurveyedPoint'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SurveyedPoint = {
    type: 'object',
    properties: {
        point: {
            type: 'object',
            description: '坐标点'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'string',
            description: '要素代码'
        },
        samplePointCode: {
            type: 'string',
            description: '样点编号'
        },
        samplePointCategory: {
            type: 'string',
            description: '样点类别'
        },
        samplingType: {
            type: 'string',
            description: '采样类型'
        },
        collectedWaterStableAggregate: {
            type: 'string',
            description: '是否采集水稳性大团聚体'
        },
        locationUnitCode: {
            type: 'string',
            description: '坐落单位代码'
        },
        locationUnitName: {
            type: 'string',
            description: '坐落单位名称'
        },
        longitude: {
            type: 'number',
            description: '经度'
        },
        latitude: {
            type: 'number',
            description: '纬度'
        },
        slope: {
            type: 'string',
            description: '坡度'
        },
        isAdjusted: {
            type: 'string',
            description: '是否修正',
            enum: ['1', '0']
        },
        adjustmentDistance: {
            type: 'number',
            description: '修正距离'
        },
        landUseType: {
            type: 'string',
            description: '土地利用类型'
        },
        soilTypeCode: {
            type: 'string',
            description: '土壤类型编码'
        },
        soilCategory: {
            type: 'string',
            description: '土类'
        },
        soilSubCategory: {
            type: 'string',
            description: '亚类'
        },
        soilGroup: {
            type: 'string',
            description: '土属'
        },
        soilSubGroup: {
            type: 'string',
            description: '土种'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['point', 'id', 'elementCode', 'samplePointCode', 'samplePointCategory', 'samplingType', 'collectedWaterStableAggregate', 'locationUnitCode', 'locationUnitName', 'longitude', 'latitude', 'slope', 'isAdjusted', 'landUseType', 'soilTypeCode', 'soilCategory', 'soilSubCategory', 'soilGroup', 'soilSubGroup']
} as const;

export const $CreateManySurveyedPointDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SurveyedPoint'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySoilPropertyMappingUnitResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilPropertyMappingUnit'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SoilPropertyMappingUnit = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'string',
            description: '要素代码'
        },
        indicatorName: {
            type: 'string',
            description: '指标名称'
        },
        upperLimit: {
            type: 'number',
            description: '指标上限'
        },
        lowerLimit: {
            type: 'number',
            description: '指标下限'
        },
        indicatorValue: {
            type: 'string',
            description: '指标值'
        },
        area: {
            type: 'number',
            description: '面积',
            minimum: 1
        }
    },
    required: ['border', 'id', 'elementCode', 'indicatorName', 'upperLimit', 'lowerLimit', 'indicatorValue', 'area']
} as const;

export const $CreateManySoilPropertyMappingUnitDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilPropertyMappingUnit'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySoilClassificationMappingUnitResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilClassificationMappingUnit'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SoilClassificationMappingUnit = {
    type: 'object',
    properties: {
        border: {
            type: 'object',
            description: '边界'
        },
        id: {
            type: 'number',
            description: '标识码'
        },
        elementCode: {
            type: 'string',
            description: '要素代码'
        },
        soilClass: {
            type: 'string',
            description: '土类'
        },
        soilSubclass: {
            type: 'string',
            description: '亚类'
        },
        soilFamily: {
            type: 'string',
            description: '土属'
        },
        soilSeries: {
            type: 'string',
            description: '土种'
        },
        area: {
            type: 'number',
            description: '面积',
            minimum: 1
        }
    },
    required: ['border', 'id', 'elementCode', 'soilClass', 'soilSubclass', 'soilFamily', 'soilSeries', 'area']
} as const;

export const $CreateManySoilClassificationMappingUnitDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilClassificationMappingUnit'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySiteConditionInfoResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SiteConditionInfo'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SiteConditionInfo = {
    type: 'object',
    properties: {
        samplePointCode: {
            type: 'string',
            description: '样点编号'
        },
        erosionType: {
            type: 'string',
            description: '侵蚀类型'
        },
        erosionDegree: {
            type: 'string',
            description: '侵蚀程度'
        },
        majorLandform: {
            type: 'string',
            description: '大地形'
        },
        mediumLandform: {
            type: 'string',
            description: '中地形'
        },
        minorLandform: {
            type: 'string',
            description: '小地形'
        },
        landformPosition: {
            type: 'string',
            description: '地形部位'
        },
        slopeDirection: {
            type: 'string',
            description: '坡向'
        },
        parentRock: {
            description: '母岩 (可多选)',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        parentMaterial: {
            description: '母质 (可多选)',
            type: 'array',
            items: {
                type: 'string'
            }
        },
        elevation: {
            type: 'number',
            description: '海拔高度'
        },
        landscapePhotoEast: {
            type: 'object',
            description: '景观照片东'
        },
        landscapePhotoSouth: {
            type: 'object',
            description: '景观照片南'
        },
        landscapePhotoWest: {
            type: 'object',
            description: '景观照片西'
        },
        landscapePhotoNorth: {
            type: 'object',
            description: '景观照片北'
        },
        samplingDate: {
            format: 'date-time',
            type: 'string',
            description: '采样时间'
        },
        weatherCondition: {
            type: 'string',
            description: '天气情况'
        },
        bedrockExposureAbundance: {
            type: 'string',
            description: '基岩出露丰度'
        },
        bedrockExposureSpacing: {
            type: 'string',
            description: '基岩出露间距'
        },
        surfaceGravelAbundance: {
            type: 'string',
            description: '地表砾石丰度'
        },
        surfaceGravelSize: {
            type: 'string',
            description: '地表砾石大小'
        },
        surfaceSaltStainAbundance: {
            type: 'string',
            description: '地表盐斑丰度'
        },
        surfaceSaltStainThickness: {
            type: 'string',
            description: '地表盐斑厚度'
        },
        surfaceCrackWidth: {
            type: 'string',
            description: '地表裂隙宽度'
        },
        surfaceCrackLength: {
            type: 'string',
            description: '地表裂隙长度'
        },
        surfaceCrackAbundance: {
            type: 'string',
            description: '地表裂隙丰度'
        },
        surfaceCrackGap: {
            type: 'string',
            description: '地表裂隙间隙'
        },
        surfaceCrackDirection: {
            type: 'string',
            description: '地表裂隙方向'
        },
        surfaceCrackContinuity: {
            type: 'string',
            description: '地表裂隙连续性'
        },
        soilDesertification: {
            type: 'string',
            description: '土壤沙化'
        },
        cropRotationSystem: {
            type: 'string',
            description: '轮作制度'
        },
        cropRotationSystemChange: {
            type: 'string',
            description: '轮作制度变更'
        },
        farmlandAbandonment: {
            type: 'string',
            description: '耕地撂荒',
            enum: ['常年', '季节性', '无撂荒']
        },
        facilityAgricultureType: {
            type: 'string',
            description: '设施农业类型',
            enum: ['露天蔬菜地', '塑料大棚', '玻璃温室', '其它']
        },
        vegetablePlantingYears: {
            type: 'number',
            description: '蔬菜种植年限'
        },
        cropRotationType: {
            type: 'string',
            description: '复种类型'
        },
        cropType: {
            type: 'string',
            description: '作物类型'
        },
        yieldLevel: {
            type: 'number',
            description: '产量水平'
        },
        fertilizerType: {
            type: 'string',
            description: '肥料种类',
            enum: ['商品有机肥', '化肥', '土杂肥', '其它']
        },
        applicationAmount: {
            type: 'number',
            description: '施用量'
        },
        applicationMethod: {
            type: 'string',
            description: '施用方式'
        },
        soilImprovementMeasures: {
            type: 'string',
            description: '培肥措施',
            enum: ['秸秆还田', '免耕', '少耕', '休耕', '种植绿肥']
        },
        isHighStandardFarmland: {
            type: 'string',
            description: '是否高标准农田'
        },
        irrigationGuaranteeRate: {
            type: 'number',
            description: '灌溉保证率'
        },
        farmlandDrainageCondition: {
            type: 'string',
            description: '农田排水条件'
        },
        fieldRoadProject: {
            type: 'string',
            description: '田间道路工程',
            enum: ['机耕路', '生产路']
        },
        fieldLevelingDegree: {
            type: 'number',
            description: '田间平整度'
        },
        orchardTreeAge: {
            type: 'number',
            description: '园地林龄'
        },
        vegetationType: {
            type: 'string',
            description: '植被类型'
        },
        vegetationCoverage: {
            type: 'string',
            description: '植被覆盖度'
        },
        surveyor: {
            type: 'string',
            description: '调查人'
        },
        surveyUnit: {
            type: 'string',
            description: '调查单位'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['samplePointCode', 'erosionType', 'erosionDegree', 'majorLandform', 'mediumLandform', 'minorLandform', 'landformPosition', 'slopeDirection', 'parentRock', 'parentMaterial', 'elevation', 'landscapePhotoEast', 'landscapePhotoSouth', 'landscapePhotoWest', 'landscapePhotoNorth', 'samplingDate', 'weatherCondition', 'bedrockExposureAbundance', 'bedrockExposureSpacing', 'surfaceGravelAbundance', 'surfaceGravelSize', 'surveyor', 'surveyUnit']
} as const;

export const $CreateManySiteConditionInfoDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SiteConditionInfo'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyMorphologyBasicInfoResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MorphologyBasicInfo'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $MorphologyBasicInfo = {
    type: 'object',
    properties: {
        samplePointCode: {
            type: 'string',
            description: '样点编号'
        },
        profilePhoto: {
            type: 'object',
            description: '剖面照片'
        },
        effectiveSoilLayerThickness: {
            type: 'number',
            description: '有效土层厚度'
        },
        soilBodyThickness: {
            type: 'number',
            description: '土体厚度'
        },
        soilStructure: {
            type: 'string',
            description: '土体构型 (通体壤、通体砂、通体黏、通体砾、砂/黏/砂、黏/砂/黏、壤/黏/壤、壤/砂/壤、砂/黏/黏、黏/砂/砂、壤/黏/黏、壤/砂/砂)',
            enum: ['通体壤', '通体砂', '通体黏', '通体砾', '砂/黏/砂', '黏/砂/黏', '壤/黏/壤', '壤/砂/壤', '砂/黏/黏', '黏/砂/砂', '壤/黏/黏', '壤/砂/砂']
        },
        occurrenceLayers: {
            type: 'number',
            description: '发生层数'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['samplePointCode', 'profilePhoto', 'effectiveSoilLayerThickness', 'soilBodyThickness', 'soilStructure', 'occurrenceLayers']
} as const;

export const $CreateManyMorphologyBasicInfoDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MorphologyBasicInfo'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyMorphologyStratifiedInfoResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MorphologyStratifiedInfo'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $MorphologyStratifiedInfo = {
    type: 'object',
    properties: {
        samplePointCode: {
            type: 'string',
            description: '样点编号'
        },
        occurrenceLayerSequence: {
            type: 'number',
            description: `发生层序号
从1开始`,
            minimum: 1
        },
        occurrenceLayerType: {
            type: 'string',
            description: '发生层类型'
        },
        occurrenceLayerPhoto: {
            description: `发生层照片
可存储多个`,
            type: 'array',
            items: {
                type: 'object'
            }
        },
        newFormationPhoto: {
            description: `新生体照片
可存储多个`,
            type: 'array',
            items: {
                type: 'object'
            }
        },
        intrusionPhoto: {
            description: `侵入体照片
可存储多个`,
            type: 'array',
            items: {
                type: 'object'
            }
        },
        animalActivityTracePhoto: {
            type: 'object',
            description: '动物活动痕迹照片'
        },
        occurrenceLayerThickness: {
            type: 'string',
            description: `发生层厚度
注1：发生层的厚度为范围描述，如：0～15cm、15～32cm等。`
        },
        boundaryClarity: {
            type: 'string',
            description: '边界明显度'
        },
        boundaryTransitionShape: {
            type: 'string',
            description: '边界过渡形状'
        },
        rootSize: {
            type: 'string',
            description: '根系大小'
        },
        rootAbundance: {
            type: 'string',
            description: '根系丰度'
        },
        rootNature: {
            type: 'string',
            description: `根系性质
注2：字段取值为“木本植物根系、草本植物根系、活根根系、已腐烂的根系”中的一项或多项。`,
            enum: ['木本植物根系', '草本植物根系', '活根根系', '已腐烂的根系']
        },
        texture: {
            type: 'string',
            description: '质地'
        },
        soilStructureShape: {
            type: 'string',
            description: '土壤结构形状'
        },
        soilStructureSize: {
            type: 'string',
            description: '土壤结构大小'
        },
        developmentDegree: {
            type: 'string',
            description: '发育程度'
        },
        soilGravelAbundance: {
            type: 'string',
            description: '土内砾石丰度'
        },
        soilGravelSize: {
            type: 'string',
            description: '土内砾石大小'
        },
        soilGravelShape: {
            type: 'string',
            description: '土内砾石形状'
        },
        soilGravelWeatheringDegree: {
            type: 'string',
            description: '土内砾石风化程度'
        },
        soilGravelMohsHardnessEstimate: {
            type: 'string',
            description: '土内砾石莫氏硬度（估）'
        },
        soilGravelComposition: {
            description: `土内砾石组成物质
注3：可多选`,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        totalPorosity: {
            type: 'string',
            description: '总孔隙度'
        },
        porosityAbundance: {
            type: 'string',
            description: '孔隙丰度'
        },
        porositySize: {
            type: 'string',
            description: '孔隙粗细'
        },
        porosityType: {
            type: 'string',
            description: '孔隙类型'
        },
        porosityDistributionLocation: {
            type: 'string',
            description: '孔隙分布位置'
        },
        structureType: {
            type: 'string',
            description: `结构性
注3：字段取值为“松散、松软、稍坚实、坚硬、很坚硬、极坚硬”中的一项。`,
            enum: ['松散', '松软', '稍坚实', '坚硬', '很坚硬', '极坚硬']
        },
        newFormationSpotAbundance: {
            type: 'string',
            description: '新生体斑纹丰度'
        },
        newFormationSpotSize: {
            type: 'string',
            description: '新生体斑纹大小'
        },
        newFormationSpotLocation: {
            type: 'string',
            description: '新生体斑纹位置'
        },
        newFormationSpotContrast: {
            type: 'string',
            description: '新生体斑纹与土壤基质对比'
        },
        newFormationSpotBoundary: {
            type: 'string',
            description: '新生体斑纹边界'
        },
        newFormationSpotComposition: {
            type: 'string',
            description: '新生体斑纹组成物质'
        },
        newFormationGelMembraneAbundance: {
            type: 'string',
            description: '新生体胶膜丰度'
        },
        newFormationGelMembraneLocation: {
            type: 'string',
            description: '新生体胶膜位置'
        },
        newFormationGelMembraneComposition: {
            type: 'string',
            description: '新生体胶膜组成物质'
        },
        newFormationGelMembraneContrast: {
            type: 'string',
            description: '新生体胶膜与土壤基质对比'
        },
        mineralNoduleAbundance: {
            type: 'string',
            description: '矿质瘤状结核丰度'
        },
        mineralNoduleType: {
            type: 'string',
            description: '矿质瘤状结核种类'
        },
        mineralNoduleSize: {
            type: 'string',
            description: '矿质瘤状结核大小'
        },
        mineralNoduleShape: {
            type: 'string',
            description: '矿质瘤状结核形状'
        },
        mineralNoduleHardness: {
            type: 'string',
            description: '矿质瘤状结核硬度'
        },
        mineralNoduleComposition: {
            type: 'string',
            description: '矿质瘤状结核组成物质'
        },
        newFormationLayerContinuity: {
            type: 'string',
            description: '新生体层连续性'
        },
        newFormationLayerInternalStructure: {
            type: 'string',
            description: '新生体层内部构造'
        },
        newFormationLayerCementationDegree: {
            type: 'string',
            description: '新生体层胶结程度'
        },
        newFormationLayerComposition: {
            type: 'string',
            description: '新生体层组成物质'
        },
        newFormationLayerOrigin: {
            type: 'string',
            description: '新生体层成因或起源'
        },
        slidingSurfaceArea: {
            type: 'string',
            description: '滑擦面面积'
        },
        intrusionType: {
            description: `侵入体种类
注4：可多选`,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        intrusionAbundance: {
            type: 'string',
            description: '侵入体丰度'
        },
        soilAnimalType: {
            description: `土壤动物种类
注4：可多选`,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        soilAnimalAbundance: {
            type: 'string',
            description: '土壤动物丰度'
        },
        soilAnimalFecesAbundance: {
            type: 'string',
            description: '土壤动物粪便丰度'
        },
        soilAnimalImpactCondition: {
            type: 'string',
            description: '土壤动物影响情况'
        },
        limeReaction: {
            type: 'string',
            description: '石灰反应'
        },
        ferrousReaction: {
            type: 'string',
            description: '亚铁反应'
        },
        conductivityQuickTest: {
            type: 'string',
            description: `电导率速测
注5：单位一般为us/cm，盐渍程度高时单位为ms/cm。填写样例“10ms/cm”。`
        },
        phenolphthaleinReaction: {
            type: 'string',
            description: '酚酞反应'
        },
        pHValue: {
            type: 'string',
            description: '酸碱度'
        },
        remark: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['samplePointCode', 'occurrenceLayerSequence', 'occurrenceLayerType', 'occurrenceLayerPhoto', 'occurrenceLayerThickness', 'boundaryClarity', 'boundaryTransitionShape', 'rootSize', 'rootAbundance', 'rootNature', 'texture', 'soilStructureShape', 'soilStructureSize', 'developmentDegree', 'totalPorosity', 'porosityAbundance', 'porositySize', 'porosityType', 'porosityDistributionLocation', 'structureType', 'limeReaction', 'pHValue']
} as const;

export const $CreateManyMorphologyStratifiedInfoDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MorphologyStratifiedInfo'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySamplingInfoResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamplingInfo'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SamplingInfo = {
    type: 'object',
    properties: {
        sampleCode: {
            type: 'string',
            description: `样品编号
本表注1：样品编号规则使用“16位样点编号+2位顺序号”。`
        },
        samplePointCode: {
            type: 'string',
            description: '样点编号'
        },
        sampleType: {
            type: 'string',
            description: '样品类型'
        },
        layerCode: {
            type: 'string',
            description: `层号
可选字段`
        },
        sampleWeight: {
            type: 'number',
            description: `样品重量
单位：g`
        },
        sampler: {
            type: 'string',
            description: '采样人'
        },
        samplingOrganization: {
            type: 'string',
            description: '采样机构'
        },
        samplingDate: {
            format: 'date-time',
            type: 'string',
            description: '采样时间'
        },
        notes: {
            type: 'string',
            description: `备注
可选字段`
        }
    },
    required: ['sampleCode', 'samplePointCode', 'sampleType', 'sampleWeight', 'sampler', 'samplingOrganization', 'samplingDate']
} as const;

export const $CreateManySamplingInfoDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SamplingInfo'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyPreparationResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Preparation'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $Preparation = {
    type: 'object',
    properties: {
        sampleCode: {
            type: 'string',
            description: `样品编号
注1：样品编号规则使用“16位样点编号+2位顺序号”。`
        },
        encryptedSampleCode: {
            type: 'string',
            description: `加密样品编号
注2：加密样品编号通过加密算法对样品编号进行加密后转换化为10位编号。`
        },
        sampleType: {
            type: 'string',
            description: '样品类型'
        },
        preservationMethod: {
            type: 'string',
            description: `保存方式
字段取值为“1=常温、2=低温、3=避光”中的一项。`,
            enum: ['1', '2', '3']
        },
        grindingMethod: {
            type: 'string',
            description: `研磨方式
TODO: 值域见本表注4，需根据具体规则进行验证。
字段取值为“手工研磨、仪器研磨”中的一项。`,
            enum: ['手工研磨', '仪器研磨']
        },
        instrumentCode: {
            type: 'string',
            description: '仪器编号'
        },
        instrumentName: {
            type: 'string',
            description: '仪器名称'
        },
        receivedSampleWeight: {
            type: 'number',
            description: '接收样品重量'
        },
        airDriedSampleWeight: {
            type: 'number',
            description: '风干样品重量'
        },
        coarseGrindingWeight: {
            type: 'number',
            description: '粗磨筛后重量'
        },
        gravelWeight: {
            type: 'number',
            description: '石砾重量'
        },
        gravelWeightPercentage: {
            type: 'number',
            description: '石砾重量百分数',
            minimum: 0,
            maximum: 99.9
        },
        nationalSampleLibraryWeight: {
            type: 'number',
            description: '国家样品库分样重量'
        },
        retainedSampleWeight: {
            type: 'number',
            description: '制备留存样品重量'
        },
        sampleWeightForInspection: {
            type: 'number',
            description: '送检样品重量'
        },
        preparer: {
            type: 'string',
            description: '制备人'
        },
        preparationInstitution: {
            type: 'string',
            description: '制备机构'
        },
        preparationDate: {
            format: 'date-time',
            type: 'string',
            description: '制备时间'
        },
        checker: {
            type: 'string',
            description: '校核人'
        },
        checkDate: {
            format: 'date-time',
            type: 'string',
            description: '校核时间'
        },
        reviewer: {
            type: 'string',
            description: '审核人'
        },
        reviewDate: {
            format: 'date-time',
            type: 'string',
            description: '审核时间'
        }
    },
    required: ['sampleCode', 'sampleType', 'preservationMethod', 'grindingMethod', 'receivedSampleWeight', 'airDriedSampleWeight', 'gravelWeight', 'gravelWeightPercentage', 'retainedSampleWeight', 'sampleWeightForInspection', 'preparer', 'preparationInstitution', 'preparationDate']
} as const;

export const $CreateManyPreparationDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Preparation'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySoilPhysicalPropertyResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilPhysicalProperty'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SoilPhysicalProperty = {
    type: 'object',
    properties: {
        sampleCode: {
            type: 'string',
            description: '样品编号'
        },
        sampleBatch: {
            type: 'string',
            description: '样品批次'
        },
        sampleType: {
            type: 'string',
            description: '样品类型'
        },
        soilBulkDensity: {
            type: 'number',
            description: `土壤容重
单位：g/cm3`
        },
        mechanicalComposition1: {
            type: 'number',
            description: `机械组成1
TODO: 值域见本表注1，需根据具体规则进行验证。
单位：%`
        },
        mechanicalComposition2: {
            type: 'number',
            description: `机械组成2
TODO: 值域见本表注1，需根据具体规则进行验证。
单位：%`
        },
        mechanicalComposition3: {
            type: 'number',
            description: `机械组成3
TODO: 值域见本表注1，需根据具体规则进行验证。
单位：%`
        },
        mechanicalComposition4: {
            type: 'number',
            description: `机械组成4
TODO: 值域见本表注1，需根据具体规则进行验证。
单位：%`
        },
        soilTexture: {
            type: 'string',
            description: `土壤质地
TODO: 值域见表B.21，需根据具体规则进行验证。`
        },
        waterStableAggregateContent1: {
            type: 'number',
            description: `水稳性大团聚体含量1
TODO: 值域见本表注2，需根据具体规则进行验证。
单位：%`
        },
        waterStableAggregateContent2: {
            type: 'number',
            description: `水稳性大团聚体含量2
TODO: 值域见本表注2，需根据具体规则进行验证。
单位：%`
        },
        waterStableAggregateContent3: {
            type: 'number',
            description: `水稳性大团聚体含量3
TODO: 值域见本表注2，需根据具体规则进行验证。
单位：%`
        },
        waterStableAggregateContent4: {
            type: 'number',
            description: `水稳性大团聚体含量4
TODO: 值域见本表注2，需根据具体规则进行验证。
单位：%`
        },
        waterStableAggregateContent5: {
            type: 'number',
            description: `水稳性大团聚体含量5
TODO: 值域见本表注2，需根据具体规则进行验证。
单位：%`
        },
        waterStableAggregateContent6: {
            type: 'number',
            description: `水稳性大团聚体含量6
TODO: 值域见本表注2，需根据具体规则进行验证。
单位：%`
        },
        waterStableAggregateContent7: {
            type: 'number',
            description: `水稳性大团聚体含量7
TODO: 值域见本表注2，需根据具体规则进行验证。
单位：%`
        },
        totalWaterStableAggregateContent: {
            type: 'number',
            description: `水稳性大团聚体总和
TODO: 值域见本表注2，需根据具体规则进行验证。
单位：%`
        },
        labCode: {
            type: 'string',
            description: '检测实验室代码'
        },
        sampleReceptionDate: {
            format: 'date-time',
            type: 'string',
            description: '接样日期'
        },
        reportDate: {
            format: 'date-time',
            type: 'string',
            description: '报告日期'
        },
        contactPerson: {
            type: 'string',
            description: '联系人'
        },
        phoneNumber: {
            type: 'string',
            description: '电话'
        }
    },
    required: ['sampleCode', 'sampleBatch', 'sampleType', 'soilBulkDensity', 'mechanicalComposition1', 'mechanicalComposition2', 'mechanicalComposition3', 'mechanicalComposition4', 'soilTexture', 'labCode', 'sampleReceptionDate', 'reportDate', 'contactPerson', 'phoneNumber']
} as const;

export const $CreateManySoilPhysicalPropertyDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilPhysicalProperty'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySoilChemicalPropertyResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilChemicalProperty'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SoilChemicalProperty = {
    type: 'object',
    properties: {
        sampleCode: {
            type: 'string',
            description: '样品编号'
        },
        sampleBatch: {
            type: 'string',
            description: '样品批次'
        },
        sampleType: {
            type: 'string',
            description: '样品类型'
        },
        ph: {
            type: 'number',
            description: 'pH'
        },
        exchangeableAcidity: {
            type: 'number',
            description: '可交换酸度'
        },
        cationExchangeCapacity: {
            type: 'number',
            description: `阳离子交换量
单位：cmol(+)/kg`
        },
        exchangeableBaseCations: {
            type: 'number',
            description: `交换性盐基总量
单位：cmol(+)/kg`
        },
        exchangeableCalcium: {
            type: 'number',
            description: `交换性钙
单位：cmol(+)/kg`
        },
        exchangeableMagnesium: {
            type: 'number',
            description: `交换性镁
单位：cmol(+)/kg`
        },
        exchangeableSodium: {
            type: 'number',
            description: `交换性钠
单位：cmol(+)/kg`
        },
        waterSolubleSaltContent: {
            type: 'number',
            description: `水溶性盐总量
单位：g/kg`
        },
        electricalConductivity: {
            type: 'number',
            description: `电导率
单位：mS/cm`
        },
        waterSolubleSodiumIon: {
            type: 'number',
            description: `水溶性钠离子
单位：cmol(Na+)/kg`
        },
        waterSolublePotassiumIon: {
            type: 'number',
            description: `水溶性钾离子
单位：cmol(K+)/kg`
        },
        waterSolubleCalciumIon: {
            type: 'number',
            description: `水溶性钙离子
单位：cmol(1/2Ca2+)/kg`
        },
        waterSolubleMagnesiumIon: {
            type: 'number',
            description: `水溶性镁离子
单位：cmol(1/2Mg2+)/kg`
        },
        waterSolubleCarbonateIon: {
            type: 'number',
            description: `水溶性碳酸根
单位：cmol(1/2CO32-)/kg`
        },
        waterSolubleBicarbonateIon: {
            type: 'number',
            description: `水溶性碳酸氢根
单位：cmol(HCO3-)/kg`
        },
        waterSolubleSulfateIon: {
            type: 'number',
            description: `水溶性硫酸根
单位：cmol(1/2SO42-)/kg`
        },
        waterSolubleChlorideIon: {
            type: 'number',
            description: `水溶性氯根
单位：cmol(Cl-)/kg`
        },
        organicMatter: {
            type: 'number',
            description: `有机质
单位：g/kg`
        },
        calciumCarbonate: {
            type: 'number',
            description: `碳酸钙
单位：g/kg`
        },
        totalNitrogen: {
            type: 'number',
            description: `全氮
单位：g/kg`
        },
        totalPhosphorus: {
            type: 'number',
            description: `全磷
单位：g/kg`
        },
        totalPotassium: {
            type: 'number',
            description: `全钾
单位：g/kg`
        },
        totalSulfur: {
            type: 'number',
            description: `全硫
单位：g/kg`
        },
        totalBoron: {
            type: 'number',
            description: `全硼
单位：mg/kg`
        },
        totalSelenium: {
            type: 'number',
            description: `全硒
单位：mg/kg`
        },
        totalIron: {
            type: 'number',
            description: `全铁
单位：mg/kg`
        },
        totalManganese: {
            type: 'number',
            description: `全锰
单位：mg/kg`
        },
        totalCopper: {
            type: 'number',
            description: `全铜
单位：mg/kg`
        },
        totalZinc: {
            type: 'number',
            description: `全锌
单位：mg/kg`
        },
        totalMolybdenum: {
            type: 'number',
            description: `全钼
单位：mg/kg`
        },
        totalAluminum: {
            type: 'number',
            description: `全铝
单位：mg/kg`
        },
        totalSilicon: {
            type: 'number',
            description: `全硅
单位：mg/kg`
        },
        totalCalcium: {
            type: 'number',
            description: `全钙
单位：mg/kg`
        },
        totalMagnesium: {
            type: 'number',
            description: `全镁
单位：mg/kg`
        },
        availablePhosphorus: {
            type: 'number',
            description: `有效磷
单位：mg/kg`
        },
        slowReleasePotassium: {
            type: 'number',
            description: `缓效钾
单位：mg/kg`
        },
        quickReleasePotassium: {
            type: 'number',
            description: `速效钾
单位：mg/kg`
        },
        availableSulfur: {
            type: 'number',
            description: `有效硫
单位：mg/kg`
        },
        availableSilicon: {
            type: 'number',
            description: `有效硅
resolved todo:: 需根据具体规则进行验证。
单位：mg/kg`
        },
        availableIron: {
            type: 'number',
            description: `有效铁
单位：mg/kg`
        },
        availableManganese: {
            type: 'number',
            description: `有效锰
单位：mg/kg`
        },
        availableCopper: {
            type: 'number',
            description: `有效铜
单位：mg/kg`
        },
        availableZinc: {
            type: 'number',
            description: `有效锌
单位：mg/kg`
        },
        availableBoron: {
            type: 'number',
            description: `有效硼
单位：mg/kg`
        },
        availableMolybdenum: {
            type: 'number',
            description: `有效钼
单位：mg/kg`
        },
        freeIronOxide: {
            type: 'number',
            description: `游离铁
resolved todo:: 需根据具体规则进行验证。
单位：g/kg`
        },
        laboratoryCode: {
            type: 'string',
            description: '检测实验室代码'
        },
        sampleReceiptDate: {
            type: 'string',
            description: '接样日期'
        },
        reportDate: {
            type: 'string',
            description: '报告日期'
        },
        contactPerson: {
            type: 'string',
            description: '联系人'
        },
        contactPhone: {
            type: 'string',
            description: '电话'
        }
    },
    required: ['sampleCode', 'sampleBatch', 'sampleType', 'ph', 'cationExchangeCapacity', 'exchangeableBaseCations', 'exchangeableCalcium', 'exchangeableMagnesium', 'exchangeableSodium', 'waterSolubleSaltContent', 'electricalConductivity', 'waterSolubleSodiumIon', 'waterSolublePotassiumIon', 'waterSolubleCalciumIon', 'waterSolubleMagnesiumIon', 'waterSolubleCarbonateIon', 'waterSolubleBicarbonateIon', 'waterSolubleSulfateIon', 'waterSolubleChlorideIon', 'organicMatter', 'totalNitrogen', 'totalPhosphorus', 'totalPotassium', 'availablePhosphorus', 'slowReleasePotassium', 'quickReleasePotassium', 'availableIron', 'availableManganese', 'availableCopper', 'availableZinc', 'availableBoron', 'availableMolybdenum', 'laboratoryCode', 'sampleReceiptDate', 'reportDate', 'contactPerson', 'contactPhone']
} as const;

export const $CreateManySoilChemicalPropertyDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilChemicalProperty'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySoilEnviroemtalPropertyResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilEnviroemtalProperty'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SoilEnviroemtalProperty = {
    type: 'object',
    properties: {
        sampleCode: {
            type: 'string',
            description: '样品编号'
        },
        sampleBatch: {
            type: 'string',
            description: '样品批次'
        },
        sampleType: {
            type: 'string',
            description: '样品类型'
        },
        totalChromium: {
            type: 'number',
            description: `总铬
单位：mg/kg`
        },
        totalCadmium: {
            type: 'number',
            description: `总镉
单位：mg/kg`
        },
        totalLead: {
            type: 'number',
            description: `总铅
单位：mg/kg`
        },
        totalArsenic: {
            type: 'number',
            description: `总砷
单位：mg/kg`
        },
        totalMercury: {
            type: 'number',
            description: `总汞
单位：mg/kg`
        },
        totalNickel: {
            type: 'number',
            description: `总镍
单位：mg/kg`
        },
        labCode: {
            type: 'string',
            description: '检测实验室代码'
        },
        sampleReceiptDate: {
            type: 'string',
            description: '接样日期'
        },
        reportDate: {
            type: 'string',
            description: '报告日期'
        },
        contactPerson: {
            type: 'string',
            description: '联系人'
        },
        phoneNumber: {
            type: 'string',
            description: '电话'
        }
    },
    required: ['sampleCode', 'sampleBatch', 'sampleType', 'totalChromium', 'totalCadmium', 'totalLead', 'totalArsenic', 'totalMercury', 'totalNickel', 'labCode', 'sampleReceiptDate', 'reportDate', 'contactPerson', 'phoneNumber']
} as const;

export const $CreateManySoilEnviroemtalPropertyDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilEnviroemtalProperty'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySoilBiologicalPropertyResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilBiologicalProperty'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SoilBiologicalProperty = {
    type: 'object',
    properties: {
        sampleCode: {
            type: 'string',
            description: '样品编号'
        },
        microbialBiomassCarbon: {
            type: 'number',
            description: '微生物生物量碳'
        },
        microbialAbsoluteAbundance: {
            type: 'string',
            description: `微生物绝对丰度
TODO: 值域见表B.83，需根据具体规则进行验证。字典选项值参照附表“B.83”，具体数量按照《土壤生物调查技术规范》处理。`
        },
        respirationIntensity: {
            type: 'number',
            description: `呼吸强度
单位：(mg,h)`
        },
        typicalCarbonTransformingEnzymeActivity: {
            type: 'string',
            description: '典型碳转化酶活性'
        },
        typicalNitrogenTransformingEnzymeActivity: {
            type: 'string',
            description: '典型氮转化酶活性'
        },
        typicalPhosphorusTransformingEnzymeActivity: {
            type: 'string',
            description: '典型磷转化酶活性'
        },
        microbialCommunityComposition: {
            type: 'string',
            description: `微生物群落组成
TODO: 取值为“细菌、真菌、古菌”中的一项或多项。`,
            enum: ['细菌', '真菌', '古菌']
        },
        microbialCommunityDiversity: {
            type: 'string',
            description: '微生物群落多样性'
        },
        microbialFunctionalDiversity: {
            type: 'string',
            description: '微生物功能多样性'
        },
        nematodeDensity: {
            type: 'number',
            description: '线虫密度'
        },
        nematodeComposition: {
            type: 'string',
            description: `线虫组成
TODO: 取值为“植食性线虫，食细菌线虫，食真菌线虫，捕食类线虫，杂食性线虫”中的一项或多项。`,
            enum: ['植食性线虫', '食细菌线虫', '食真菌线虫', '捕食类线虫', '杂食性线虫']
        },
        nematodeDiversity: {
            type: 'string',
            description: '线虫多样性'
        },
        earthwormBiomass: {
            type: 'string',
            description: '蚯蚓生物量'
        },
        earthwormComposition: {
            type: 'string',
            description: `蚯蚓组成
TODO: 取值为“表生型蚯蚓，内生型蚯蚓，深栖型蚯蚓”中的一项或多项。`,
            enum: ['表生型蚯蚓', '内生型蚯蚓', '深栖型蚯蚓']
        },
        earthwormDiversity: {
            type: 'string',
            description: '蚯蚓多样性'
        },
        labCode: {
            type: 'string',
            description: '检测实验室代码'
        },
        tester: {
            type: 'string',
            description: '检测人员'
        },
        testDate: {
            type: 'string',
            description: '检测日期'
        }
    },
    required: ['sampleCode', 'microbialBiomassCarbon', 'microbialAbsoluteAbundance', 'respirationIntensity', 'labCode', 'tester', 'testDate']
} as const;

export const $CreateManySoilBiologicalPropertyDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SoilBiologicalProperty'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyTransportationResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Transportation'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $Transportation = {
    type: 'object',
    properties: {
        sampleBoxNumber: {
            type: 'string',
            description: `样品箱号
编号规则为：6位行政区代码+X+8位日期+4位流水号`
        },
        sampleType: {
            type: 'string',
            description: `样品类型
TODO: 值域见表B.89，需根据具体规则进行验证`
        },
        sampleQuantity: {
            type: 'number',
            description: '样品数量'
        },
        transferStage: {
            type: 'number',
            description: '流转环节',
            enum: [1, 2, 3]
        },
        recipientOrganization: {
            type: 'string',
            description: '送达单位'
        },
        deliveryDeadline: {
            type: 'string',
            description: '送达期限'
        },
        consignorOrganization: {
            type: 'string',
            description: '交运单位'
        },
        consignor: {
            type: 'string',
            description: '交运人'
        },
        contactInformation: {
            type: 'string',
            description: '联系方式'
        },
        consignmentDate: {
            type: 'string',
            description: '交运日期'
        },
        carrierOrganization: {
            type: 'string',
            description: '承运单位'
        },
        transportResponsiblePerson: {
            type: 'string',
            description: '运输负责人'
        },
        transportVehicleNumberPlate: {
            type: 'string',
            description: '运输车（船）号牌'
        }
    },
    required: ['sampleBoxNumber', 'sampleType', 'sampleQuantity', 'transferStage', 'recipientOrganization', 'deliveryDeadline', 'consignorOrganization', 'consignor', 'contactInformation', 'consignmentDate', 'carrierOrganization']
} as const;

export const $CreateManyTransportationDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Transportation'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyTransportationInventoryResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TransportationInventory'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $TransportationInventory = {
    type: 'object',
    properties: {
        serialNumber: {
            type: 'number',
            description: '序号'
        },
        sampleCode: {
            type: 'string',
            description: '样品编号'
        },
        sampleBoxNumber: {
            type: 'string',
            description: '样品箱号'
        },
        storageMethod: {
            type: 'number',
            description: `保存方式
TODO: 字段取值为“1=常温、2=低温、3=避光”中的一项`,
            enum: [1, 2, 3]
        },
        contaminationPreventionMeasure: {
            type: 'number',
            description: `有无措施防止沾污
TODO: 字段取值为“1=有、0=无”中的一项`,
            enum: [1, 0]
        },
        damagePreventionMeasure: {
            type: 'string',
            description: `有无措施防止破损
TODO: 字段取值为“1=有、0=无”中的一项`
        }
    },
    required: ['serialNumber', 'sampleCode', 'sampleBoxNumber', 'storageMethod', 'contaminationPreventionMeasure', 'damagePreventionMeasure']
} as const;

export const $CreateManyTransportationInventoryDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TransportationInventory'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySampleReceiptResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SampleReceipt'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SampleReceipt = {
    type: 'object',
    properties: {
        sampleBoxNumber: {
            type: 'string',
            description: '样品箱号'
        },
        sampleType: {
            type: 'string',
            description: `样品类型
TODO: 值域见表B.89`
        },
        sampleQuantity: {
            type: 'number',
            description: '样品数量'
        },
        transferStage: {
            type: 'number',
            description: `流转环节
TODO: 字段取值为“1=采样-制备、2=制备-检测、3=制备-样品库、4=质控-制备”中的一项`,
            enum: [1, 2, 3, 4]
        },
        senderUnit: {
            type: 'string',
            description: '送样单位'
        },
        senderName: {
            type: 'string',
            description: '送样人'
        },
        sendingDate: {
            format: 'date-time',
            type: 'string',
            description: '送样日期'
        },
        senderContact: {
            type: 'string',
            description: '送样联系方式'
        },
        receiverUnit: {
            type: 'string',
            description: '收样单位'
        },
        receiverName: {
            type: 'string',
            description: '收样人'
        },
        receivingDate: {
            format: 'date-time',
            type: 'string',
            description: '收样日期'
        },
        receiverContact: {
            type: 'string',
            description: '收样联系方式'
        }
    },
    required: ['sampleBoxNumber', 'sampleType', 'sampleQuantity', 'transferStage', 'senderUnit', 'senderName', 'sendingDate', 'senderContact', 'receiverUnit', 'receiverName', 'receivingDate', 'receiverContact']
} as const;

export const $CreateManySampleReceiptDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SampleReceipt'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySampleReceiptInventoryResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SampleReceiptInventory'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SampleReceiptInventory = {
    type: 'object',
    properties: {
        id: {
            type: 'number',
            description: '序号'
        },
        sampleNumber: {
            type: 'string',
            description: '样品编号'
        },
        sampleBoxNumber: {
            type: 'string',
            description: '样品箱号'
        },
        weightCompliant: {
            type: 'string',
            description: `样品重量是否符合要求
TODO: 字段取值为“1=符合、0=不符合”中的一项`
        },
        packagingIntact: {
            type: 'string',
            description: `样品包装容器是否完好
TODO: 字段取值为“1=完好、0=损坏”中的一项`
        },
        labelIntactAndClean: {
            type: 'string',
            description: `样品标签是否完好整洁
TODO: 字段取值为“1=完好、0=损坏”中的一项`
        },
        storageMethodCompliant: {
            type: 'string',
            description: `保存方法是否符合要求
TODO: 字段取值为“1=符合、0=不符合”中的一项`
        }
    },
    required: ['id', 'sampleNumber', 'sampleBoxNumber', 'weightCompliant', 'packagingIntact', 'labelIntactAndClean', 'storageMethodCompliant']
} as const;

export const $CreateManySampleReceiptInventoryDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SampleReceiptInventory'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyQualityControlSampleResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QualityControlSample'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $QualityControlSample = {
    type: 'object',
    properties: {
        qcSampleNumber: {
            type: 'number',
            description: `质控样编号
 编码规则：8位质控实验室代码+YP+2位批号+5位顺序号`
        },
        province: {
            type: 'string',
            description: '省份'
        },
        qcLabCode: {
            type: 'string',
            description: '质控实验室代码'
        },
        qcSamplePreparationUnit: {
            type: 'string',
            description: '质控样研制单位'
        },
        expirationDate: {
            type: 'string',
            description: '有效期'
        },
        ph: {
            type: 'number',
            description: 'pH'
        },
        exchangeableAcidity: {
            type: 'number',
            description: '可交换酸度'
        },
        cationExchangeCapacity: {
            type: 'number',
            description: `阳离子交换量
单位：cmol(+)/kg`
        },
        exchangeableBaseCations: {
            type: 'number',
            description: `交换性盐基总量
单位：cmol(+)/kg`
        },
        exchangeableCalcium: {
            type: 'number',
            description: `交换性钙
单位：cmol(+)/kg`
        },
        exchangeableMagnesium: {
            type: 'number',
            description: `交换性镁
单位：cmol(+)/kg`
        },
        exchangeableSodium: {
            type: 'number',
            description: `交换性钠
单位：cmol(+)/kg`
        },
        totalBaseCations: {
            type: 'number',
            description: `盐基总量
单位：cmol(+)/kg`
        },
        waterSolubleSaltContent: {
            type: 'number',
            description: `水溶性盐总量
单位：g/kg`
        },
        electricalConductivity: {
            type: 'number',
            description: `电导率
单位：mS/cm`
        },
        waterSolubleSodiumIon: {
            type: 'number',
            description: `水溶性钠离子
单位：cmol(Na+)/kg`
        },
        waterSolublePotassiumIon: {
            type: 'number',
            description: `水溶性钾离子
单位：cmol(K+)/kg`
        },
        waterSolubleCalciumIon: {
            type: 'number',
            description: `水溶性钙离子
单位：cmol(1/2Ca2+)/kg`
        },
        waterSolubleMagnesiumIon: {
            type: 'number',
            description: `水溶性镁离子
单位：cmol(1/2Mg2+)/kg`
        },
        waterSolubleCarbonateIon: {
            type: 'number',
            description: `水溶性碳酸根
单位：cmol(1/2CO32-)/kg`
        },
        waterSolubleBicarbonateIon: {
            type: 'number',
            description: `水溶性碳酸氢根
单位：cmol(HCO3-)/kg`
        },
        waterSolubleSulfateIon: {
            type: 'number',
            description: `水溶性硫酸根
单位：cmol(1/2SO42-)/kg`
        },
        waterSolubleChlorideIon: {
            type: 'number',
            description: `水溶性氯根
单位：cmol(Cl-)/kg`
        },
        organicMatter: {
            type: 'number',
            description: `有机质
单位：g/kg`
        },
        totalNitrogen: {
            type: 'number',
            description: `全氮
单位：g/kg`
        },
        totalPhosphorus: {
            type: 'number',
            description: `全磷
单位：g/kg`
        },
        totalPotassium: {
            type: 'number',
            description: `全钾
单位：g/kg`
        },
        totalSulfur: {
            type: 'number',
            description: `全硫
 需根据具体规则进行验证。
单位：g/kg`
        },
        totalBoron: {
            type: 'number',
            description: `全硼
 需根据具体规则进行验证。
单位：mg/kg`
        },
        totalSelenium: {
            type: 'number',
            description: `全硒
 需根据具体规则进行验证。
单位：mg/kg`
        },
        totalIron: {
            type: 'number',
            description: `全铁
 需根据具体规则进行验证。
单位：mg/kg`
        },
        totalManganese: {
            type: 'number',
            description: `全锰
 需根据具体规则进行验证。
单位：mg/kg`
        },
        totalCopper: {
            type: 'number',
            description: `全铜
 需根据具体规则进行验证。
单位：mg/kg`
        },
        totalZinc: {
            type: 'number',
            description: `全锌
 需根据具体规则进行验证。
单位：mg/kg`
        },
        totalMolybdenum: {
            type: 'number',
            description: `全钼
 需根据具体规则进行验证。
单位：mg/kg`
        },
        totalAluminum: {
            type: 'number',
            description: `全铝
 需根据具体规则进行验证。
单位：mg/kg`
        },
        totalSilicon: {
            type: 'number',
            description: `全硅
 需根据具体规则进行验证。
单位：mg/kg`
        },
        totalCalcium: {
            type: 'number',
            description: `全钙
 需根据具体规则进行验证。
单位：mg/kg`
        },
        totalMagnesium: {
            type: 'number',
            description: `全镁
 需根据具体规则进行验证。
单位：mg/kg`
        },
        availablePhosphorus: {
            type: 'number',
            description: `有效磷
单位：mg/kg`
        },
        slowReleasePotassium: {
            type: 'number',
            description: `缓效钾
单位：mg/kg`
        },
        quickReleasePotassium: {
            type: 'number',
            description: `速效钾
单位：mg/kg`
        },
        availableSulfur: {
            type: 'number',
            description: `有效硫
 需根据具体规则进行验证。
单位：mg/kg`
        },
        availableSilicon: {
            type: 'number',
            description: `有效硅
 需根据具体规则进行验证。
单位：mg/kg`
        },
        availableIron: {
            type: 'number',
            description: `有效铁
单位：mg/kg`
        },
        availableManganese: {
            type: 'number',
            description: `有效锰
单位：mg/kg`
        },
        availableCopper: {
            type: 'number',
            description: `有效铜
单位：mg/kg`
        },
        availableZinc: {
            type: 'number',
            description: `有效锌
单位：mg/kg`
        },
        availableBoron: {
            type: 'number',
            description: `有效硼
单位：mg/kg`
        },
        availableMolybdenum: {
            type: 'number',
            description: `有效钼
单位：mg/kg`
        },
        freeIronOxide: {
            type: 'number',
            description: `游离铁
 需根据具体规则进行验证。
单位：g/kg`
        },
        totalMercury: {
            type: 'number',
            description: '总汞 (单位：mg/kg)'
        },
        totalArsenic: {
            type: 'number',
            description: '总砷 (单位：mg/kg)'
        },
        totalLead: {
            type: 'number',
            description: '总铅 (单位：mg/kg)'
        },
        totalCadmium: {
            type: 'number',
            description: '总镉 (单位：mg/kg)'
        },
        totalChromium: {
            type: 'number',
            description: '总铬 (单位：mg/kg)'
        },
        totalNickel: {
            type: 'number',
            description: '总镍 (单位：mg/kg)'
        }
    },
    required: ['qcSampleNumber', 'province', 'qcLabCode', 'qcSamplePreparationUnit', 'expirationDate', 'ph', 'cationExchangeCapacity', 'exchangeableBaseCations', 'exchangeableCalcium', 'exchangeableMagnesium', 'exchangeableSodium', 'totalBaseCations', 'waterSolubleSaltContent', 'electricalConductivity', 'waterSolubleSodiumIon', 'waterSolublePotassiumIon', 'waterSolubleCalciumIon', 'waterSolubleMagnesiumIon', 'waterSolubleCarbonateIon', 'waterSolubleBicarbonateIon', 'waterSolubleSulfateIon', 'waterSolubleChlorideIon', 'organicMatter', 'totalNitrogen', 'totalPhosphorus', 'totalPotassium', 'availablePhosphorus', 'slowReleasePotassium', 'quickReleasePotassium', 'availableIron', 'availableManganese', 'availableCopper', 'availableZinc', 'availableBoron', 'availableMolybdenum', 'totalMercury', 'totalArsenic', 'totalLead', 'totalCadmium', 'totalChromium', 'totalNickel']
} as const;

export const $CreateManyQualityControlSampleDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QualityControlSample'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManySampleRepositoryResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SampleRepository'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $SampleRepository = {
    type: 'object',
    properties: {
        sampleNumber: {
            type: 'number',
            description: '样品编号'
        },
        samplePointNumber: {
            type: 'string',
            description: '样点编号'
        },
        location: {
            type: 'string',
            description: '坐落位置'
        },
        landUseType: {
            type: 'string',
            description: `土地利用类型
TODO: 依据《第三次全国国土调查技术规程》附录A 第三次全国国土调查工作分类执行,填写最末级分类`
        },
        soilTypeCode: {
            type: 'string',
            description: '土壤类型编码'
        },
        soilClass: {
            type: 'string',
            description: '土类'
        },
        soilSubClass: {
            type: 'string',
            description: '亚类'
        },
        soilGroup: {
            type: 'string',
            description: '土属'
        },
        soilFamily: {
            type: 'string',
            description: '土种'
        },
        profileDepth: {
            type: 'string',
            description: '剖面深度'
        },
        specimenType: {
            type: 'string',
            description: '标本类型'
        },
        storageDate: {
            type: 'string',
            description: '入库日期'
        },
        storagePerson: {
            type: 'string',
            description: '入库人'
        },
        storageLocation: {
            type: 'string',
            description: '存放地点'
        },
        storageShelf: {
            type: 'string',
            description: '存放架'
        },
        storageCabinet: {
            type: 'string',
            description: '存放柜'
        },
        storageLayer: {
            type: 'string',
            description: '存放层'
        },
        storageRow: {
            type: 'string',
            description: '存放行'
        },
        storageColumn: {
            type: 'string',
            description: '存放列'
        }
    },
    required: ['sampleNumber', 'samplePointNumber', 'location', 'landUseType', 'soilTypeCode', 'soilClass', 'soilSubClass', 'storageDate', 'storagePerson', 'storageLocation', 'storageShelf', 'storageCabinet', 'storageLayer', 'storageRow', 'storageColumn']
} as const;

export const $CreateManySampleRepositoryDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SampleRepository'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyTestingLabResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TestingLab'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $TestingLab = {
    type: 'object',
    properties: {
        labCode: {
            type: 'number',
            description: '检测实验室代码',
            pattern: '/^[0-9]{2}JC[0-9]{4}$/'
        },
        labName: {
            type: 'string',
            description: '检测实验室名称'
        },
        standardizedLabCertificateNumber: {
            type: 'string',
            description: '耕地质量标准化验室证书编号'
        },
        address: {
            type: 'string',
            description: '单位地址'
        },
        qualityControlMeasures: {
            type: 'string',
            description: '质量控制措施'
        },
        standardMaterialDemand: {
            type: 'number',
            description: `标准物质需求量
单位：千克/年`
        },
        referenceMaterialDemand: {
            type: 'number',
            description: `参比物质需求量
单位：千克/年`
        },
        certification: {
            type: 'string',
            description: `检测资质
TODO: 选择其它时，需要在备注项中描述说明具体资质`,
            enum: ['无相关资质', '计量认证', '农业部部级质检机构审查认可', '农产品质量安全检测机构', '其他']
        },
        basicConditions: {
            type: 'string',
            description: '基础条件'
        },
        testingCapability: {
            type: 'string',
            description: '检测能力',
            enum: ['JXZC', 'TRSWXDTJ', 'PH', 'KJHSD', 'YLZJHL', 'JHXYJJ', 'SRXY', 'OM', 'TN', 'TP', 'TK', 'TS', 'TB', 'TSE', 'TFE', 'TMN', 'TCU', 'TZN', 'TMO', 'TAL', 'TSI', 'TCA', 'TMG', 'AP', 'SK', 'AK', 'AS', 'ASI', 'AFE', 'AMN', 'ACU', 'AZN', 'AB', 'AMO', 'HG', 'AS2', 'PB', 'CD', 'CR', 'NI']
        },
        sampleCategories: {
            type: 'string',
            description: `检测样品类别
TODO: 参考本表注3的值域`,
            enum: ['土壤', '肥料', '农产品', '其他']
        },
        workScope: {
            type: 'string',
            description: '检测工作范围'
        },
        remarks: {
            type: 'string',
            description: '备注'
        }
    },
    required: ['labCode', 'labName', 'address', 'qualityControlMeasures', 'standardMaterialDemand', 'referenceMaterialDemand', 'certification', 'basicConditions', 'testingCapability', 'workScope']
} as const;

export const $CreateManyTestingLabDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TestingLab'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyQualityControlLabResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QualityControlLab'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $QualityControlLab = {
    type: 'object',
    properties: {
        labCode: {
            type: 'number',
            description: `质控实验室代码
TODO: 质控实验室代码编码规则：2位省级代码+ZK+4位顺序号`,
            pattern: '/^[0-9]{2}ZK[0-9]{4}$/'
        },
        labName: {
            type: 'string',
            description: '质控实验室名称'
        },
        workScope: {
            type: 'string',
            description: '质控工作范围'
        },
        responsiblePerson: {
            type: 'string',
            description: '负责人'
        },
        contactPerson: {
            type: 'string',
            description: '联系人'
        },
        contactNumber: {
            type: 'string',
            description: '联系电话'
        },
        address: {
            type: 'string',
            description: '地址'
        },
        recommendingDepartment: {
            type: 'string',
            description: '推荐部门'
        }
    },
    required: ['labCode', 'labName', 'workScope', 'responsiblePerson', 'contactPerson', 'contactNumber', 'address']
} as const;

export const $CreateManyQualityControlLabDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/QualityControlLab'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyPersonnelResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Personnel'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $Personnel = {
    type: 'object',
    properties: {
        personnelCode: {
            type: 'number',
            description: `人员代码
TODO: 编码规则：1位人员类型+7位顺序号`,
            pattern: '/^.[0-9]{7}$/'
        },
        personnelType: {
            type: 'number',
            description: `人员类型
TODO: 值域见表注2
可多选：1=检测人员、2=采样人员、3=质控人员、4=技术专家、5=省级管理人员、6=国家管理人员、9=其他人员`,
            enum: [1, 2, 3, 4, 5, 6, 9]
        },
        name: {
            type: 'string',
            description: '姓名'
        },
        organization: {
            type: 'string',
            description: '单位'
        },
        phone: {
            type: 'string',
            description: '电话'
        },
        email: {
            type: 'string',
            description: '邮箱'
        },
        address: {
            type: 'string',
            description: '通讯地址'
        },
        bio: {
            type: 'string',
            description: '人员简介'
        },
        title: {
            type: 'number',
            description: `职称
选项：4=正高级、3=副高级、2=中级职称、1=初级、9=其它`,
            enum: [1, 2, 3, 4, 9]
        },
        education: {
            type: 'number',
            description: `学历
选项：4=硕士及以上、3=本科、2=大专、1=中专、9=其它`,
            enum: [1, 2, 3, 4, 9]
        },
        workExperience: {
            type: 'number',
            description: `工作经历
选项：4=5年以上、3=3-5年、2=1-3年、1=少于1年`,
            enum: [1, 2, 3, 4]
        },
        affiliatedOrganizationCode: {
            type: 'string',
            description: '所属机构代码'
        }
    },
    required: ['personnelCode', 'personnelType', 'name', 'organization', 'phone', 'email', 'address', 'bio']
} as const;

export const $CreateManyPersonnelDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Personnel'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyDataIdInfoResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DataIdInfo'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $DataIdInfo = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            description: `名称 - 数据集名称
最大出现次数: 1`
        },
        date: {
            format: 'date-time',
            type: 'string',
            description: `日期 - 数据集发布或最近更新日期
格式: YYYYMMDD
最大出现次数: 1`
        },
        geoID: {
            type: 'string',
            description: `行政区代码 - 定位名称的唯一标识
TODO: 按照GB/T 2260的6位数字码
最大出现次数: 1`
        },
        dataEdition: {
            type: 'string',
            description: `版本 - 数据集的版本
可选字段 - 数据集有新版本？
最大出现次数: 1`
        },
        dataLang: {
            description: `语种 - 数据集使用的语种
TODO: 按照GB/T4880用两位小写字母表示
可多选字段`,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        idAbs: {
            type: 'string',
            description: `摘要 - 数据集内容的概要说明
最大出现次数: 1
300字左右的自由文本`
        },
        status: {
            type: 'string',
            description: `现状 - 数据集的现状
最大出现次数: 1
值域: 001.完成；002.作废；003.连续更新；004.正在建设中`
        },
        ending: {
            format: 'date-time',
            type: 'string',
            description: `终止时间 - 数据集原始数据生成或采集的终止时间
格式: YYYYMMDD
最大出现次数: 1`
        },
        rpOrgName: {
            type: 'string',
            description: `负责单位名称 - 数据集负责单位名称
最大出现次数: 1`
        },
        rpCnt: {
            type: 'string',
            description: `联系人 - 数据集负责单位联系人姓名
最大出现次数: 1`
        },
        voiceNum: {
            description: `电话 - 数据集负责单位或联系人的电话号码
可多选字段`,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        faxNum: {
            description: `传真 - 数据集负责单位或联系人的传真号码
可选字段`,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        cntAddress: {
            type: 'string',
            description: `通信地址 - 数据集负责单位或联系人的通信地址
最大出现次数: 1`
        },
        cntCode: {
            type: 'string',
            description: `邮政编码 - 数据集负责单位邮政编码
最大出现次数: 1`
        },
        cntEmail: {
            description: `电子信箱地址 - 数据集负责单位或联系人的电子信箱地址
可选字段`,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        classCode: {
            type: 'string',
            description: `安全等级代码 - 出于国家安全、保密或其他考虑，对数据集安全限制的等级名称
最大出现次数: 1
值域: 001.绝密；002.机密；003.秘密；004.限制；005.内部；006.无限制`
        }
    },
    required: ['title', 'date', 'geoID', 'dataLang', 'idAbs', 'status', 'ending', 'rpOrgName', 'rpCnt', 'voiceNum', 'cntAddress', 'cntCode', 'classCode']
} as const;

export const $CreateManyDataIdInfoDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DataIdInfo'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyRefSysInfoResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RefSysInfo'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $RefSysInfo = {
    type: 'object',
    properties: {
        coorRSID: {
            type: 'string',
            description: `大地坐标参照系统名称 - 大地坐标参照系统名称
最大出现次数: 1
采用2000国家大地坐标系`
        },
        centralMer: {
            type: 'number',
            description: `中央经线 - 中央经线参数信息
最大出现次数: 1
单位: 度`
        },
        eastFAL: {
            type: 'number',
            description: `东偏移 - 东偏移参数信息
最大出现次数: 1
单位: 千米`
        },
        northFAL: {
            type: 'number',
            description: `北偏移 - 北偏移参数信息
最大出现次数: 1
单位: 千米`
        },
        coorFDKD: {
            type: 'string',
            description: `分带方式 - 说明分带宽度
最大出现次数: 1
值域: 001. 1.5°；002. 3°`
        }
    },
    required: ['coorRSID', 'centralMer', 'eastFAL', 'northFAL', 'coorFDKD']
} as const;

export const $CreateManyRefSysInfoDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/RefSysInfo'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyContInfoResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ContInfo'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $ContInfo = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        layName: {
            type: 'string',
            description: `图层名称 - 数据集所包含的图层名称
最大出现次数: N
类型: 字符型，自由文本`
        },
        catFetTyps: {
            type: 'string',
            description: `数据集要素类型名称 - 具有同类属性的要素类名称
最大出现次数: N
类型: 字符型，自由文本`
        },
        attrTypList: {
            type: 'string',
            description: `与数据集要素类名称对应的主要属性列表 - 要素类主要属性内容的文字表述
最大出现次数: N
类型: 字符型，自由文本`
        },
        capacity: {
            type: 'string',
            description: `数据量 - 数据集所占存储空间的大小
最大出现次数: 1
类型: 字符型，自由文本`
        }
    },
    required: ['id', 'layName', 'catFetTyps', 'attrTypList']
} as const;

export const $CreateManyContInfoDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ContInfo'
            }
        }
    },
    required: ['bulk']
} as const;

export const $GetManyDqInfoResponseDto = {
    type: 'object',
    properties: {
        data: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DqInfo'
            }
        },
        count: {
            type: 'number'
        },
        total: {
            type: 'number'
        },
        page: {
            type: 'number'
        },
        pageCount: {
            type: 'number'
        }
    },
    required: ['data', 'count', 'total', 'page', 'pageCount']
} as const;

export const $DqInfo = {
    type: 'object',
    properties: {
        id: {
            type: 'number'
        },
        dqStatement: {
            type: 'string',
            description: `数据质量概述 - 数据集质量的定性和定量的概括说明
最大出现次数: 1
类型: 字符型，自由文本`
        },
        dqLineage: {
            type: 'string',
            description: `数据志 - 数据生产过程中数据源、处理过程（算法与参数）等的说明信息
最大出现次数: 1
类型: 字符型，自由文本`
        }
    },
    required: ['id', 'dqStatement', 'dqLineage']
} as const;

export const $CreateManyDqInfoDto = {
    type: 'object',
    properties: {
        bulk: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/DqInfo'
            }
        }
    },
    required: ['bulk']
} as const;

export const $PasswordLoginDto = {
    type: 'object',
    properties: {
        username: {
            type: 'string',
            minLength: 1,
            maxLength: 20
        },
        password: {
            type: 'string',
            minLength: 1,
            maxLength: 32
        }
    },
    required: ['username', 'password']
} as const;

export const $CreateRoleDto = {
    type: 'object',
    properties: {}
} as const;

export const $UpdateRoleDto = {
    type: 'object',
    properties: {}
} as const;