// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { GetHelloError, GetHelloResponse, RegisterData, RegisterError, RegisterResponse, GetOneData, GetOneError, GetOneResponse, UpdateOneData, UpdateOneError, UpdateOneResponse, ReplaceOneData, ReplaceOneError, ReplaceOneResponse, DeleteOneData, DeleteOneError, DeleteOneResponse, GetManyData, GetManyError, GetManyResponse, CreateOneData, CreateOneError, CreateOneResponse, CreateManyData, CreateManyError, CreateManyResponse, FooError, FooResponse, LoginData, LoginError, LoginResponse, GetProfileError, GetProfileResponse, TestError, TestResponse, CreateData, CreateError, CreateResponse, FindAllError, FindAllResponse, FindOneData, FindOneError, FindOneResponse, UpdateData, UpdateError, UpdateResponse, RemoveData, RemoveError, RemoveResponse, GetDictData, GetDictError, GetDictResponse, GetAllError, GetAllResponse, FindData, FindError, FindResponse, UploadFileError, UploadFileResponse, GetFileData, GetFileError, GetFileResponse } from './types.gen';

export const client = createClient(createConfig());

export class DefaultService {
    public static getHello<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetHelloResponse, GetHelloError, ThrowOnError>({
            ...options,
            url: '/'
        });
    }
    
}

export class UserService {
    public static register<ThrowOnError extends boolean = false>(options: Options<RegisterData, ThrowOnError>) {
        return (options?.client ?? client).post<RegisterResponse, RegisterError, ThrowOnError>({
            ...options,
            url: '/user/register'
        });
    }
    
    /**
     * Retrieve a single User
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/user/{id}'
        });
    }
    
    /**
     * Update a single User
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/user/{id}'
        });
    }
    
    /**
     * Replace a single User
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/user/{id}'
        });
    }
    
    /**
     * Delete a single User
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/user/{id}'
        });
    }
    
    /**
     * Retrieve multiple Users
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/user'
        });
    }
    
    /**
     * Create a single User
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/user'
        });
    }
    
    /**
     * Create multiple Users
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/user/bulk'
        });
    }
    
}

export class CropYieldLevelService {
    /**
     * Retrieve a single CropYieldLevel
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/cropyieldlevel/{id}'
        });
    }
    
    /**
     * Update a single CropYieldLevel
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/cropyieldlevel/{id}'
        });
    }
    
    /**
     * Replace a single CropYieldLevel
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/cropyieldlevel/{id}'
        });
    }
    
    /**
     * Delete a single CropYieldLevel
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/cropyieldlevel/{id}'
        });
    }
    
    /**
     * Retrieve multiple CropYieldLevels
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/cropyieldlevel'
        });
    }
    
    /**
     * Create a single CropYieldLevel
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/cropyieldlevel'
        });
    }
    
    /**
     * Create multiple CropYieldLevels
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/cropyieldlevel/bulk'
        });
    }
    
}

export class CroppingSystemService {
    /**
     * Retrieve a single CroppingSystem
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/croppingsystem/{id}'
        });
    }
    
    /**
     * Update a single CroppingSystem
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/croppingsystem/{id}'
        });
    }
    
    /**
     * Replace a single CroppingSystem
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/croppingsystem/{id}'
        });
    }
    
    /**
     * Delete a single CroppingSystem
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/croppingsystem/{id}'
        });
    }
    
    /**
     * Retrieve multiple CroppingSystems
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/croppingsystem'
        });
    }
    
    /**
     * Create a single CroppingSystem
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/croppingsystem'
        });
    }
    
    /**
     * Create multiple CroppingSystems
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/croppingsystem/bulk'
        });
    }
    
}

export class DominantVegetationSpeciesService {
    /**
     * Retrieve a single DominantVegetationSpecies
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/dominantvegetationspecies/{id}'
        });
    }
    
    /**
     * Update a single DominantVegetationSpecies
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/dominantvegetationspecies/{id}'
        });
    }
    
    /**
     * Replace a single DominantVegetationSpecies
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/dominantvegetationspecies/{id}'
        });
    }
    
    /**
     * Delete a single DominantVegetationSpecies
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/dominantvegetationspecies/{id}'
        });
    }
    
    /**
     * Retrieve multiple DominantVegetationSpecies
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/dominantvegetationspecies'
        });
    }
    
    /**
     * Create a single DominantVegetationSpecies
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/dominantvegetationspecies'
        });
    }
    
    /**
     * Create multiple DominantVegetationSpecies
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/dominantvegetationspecies/bulk'
        });
    }
    
}

export class LandUsageService {
    /**
     * Retrieve a single LandUsage
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/landusage/{id}'
        });
    }
    
    /**
     * Update a single LandUsage
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/landusage/{id}'
        });
    }
    
    /**
     * Replace a single LandUsage
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/landusage/{id}'
        });
    }
    
    /**
     * Delete a single LandUsage
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/landusage/{id}'
        });
    }
    
    /**
     * Retrieve multiple LandUsages
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/landusage'
        });
    }
    
    /**
     * Create a single LandUsage
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/landusage'
        });
    }
    
    /**
     * Create multiple LandUsages
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/landusage/bulk'
        });
    }
    
}

export class PlantingStructureService {
    /**
     * Retrieve a single PlantingStructure
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/plantingstructure/{id}'
        });
    }
    
    /**
     * Update a single PlantingStructure
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/plantingstructure/{id}'
        });
    }
    
    /**
     * Replace a single PlantingStructure
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/plantingstructure/{id}'
        });
    }
    
    /**
     * Delete a single PlantingStructure
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/plantingstructure/{id}'
        });
    }
    
    /**
     * Retrieve multiple PlantingStructures
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/plantingstructure'
        });
    }
    
    /**
     * Create a single PlantingStructure
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/plantingstructure'
        });
    }
    
    /**
     * Create multiple PlantingStructures
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/plantingstructure/bulk'
        });
    }
    
}

export class SlopeMapService {
    /**
     * Retrieve a single SlopeMap
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/slopemap/{id}'
        });
    }
    
    /**
     * Update a single SlopeMap
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/slopemap/{id}'
        });
    }
    
    /**
     * Replace a single SlopeMap
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/slopemap/{id}'
        });
    }
    
    /**
     * Delete a single SlopeMap
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/slopemap/{id}'
        });
    }
    
    /**
     * Retrieve multiple SlopeMaps
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/slopemap'
        });
    }
    
    /**
     * Create a single SlopeMap
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/slopemap'
        });
    }
    
    /**
     * Create multiple SlopeMaps
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/slopemap/bulk'
        });
    }
    
}

export class SoilTypeService {
    /**
     * Retrieve a single SoilType
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/soiltype/{id}'
        });
    }
    
    /**
     * Update a single SoilType
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/soiltype/{id}'
        });
    }
    
    /**
     * Replace a single SoilType
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/soiltype/{id}'
        });
    }
    
    /**
     * Delete a single SoilType
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/soiltype/{id}'
        });
    }
    
    /**
     * Retrieve multiple SoilTypes
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/soiltype'
        });
    }
    
    /**
     * Create a single SoilType
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/soiltype'
        });
    }
    
    /**
     * Create multiple SoilTypes
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/soiltype/bulk'
        });
    }
    
}

export class BoundaryService {
    /**
     * Retrieve a single Boundary
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/boundary/{id}'
        });
    }
    
    /**
     * Update a single Boundary
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/boundary/{id}'
        });
    }
    
    /**
     * Replace a single Boundary
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/boundary/{id}'
        });
    }
    
    /**
     * Delete a single Boundary
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/boundary/{id}'
        });
    }
    
    /**
     * Retrieve multiple Boundaries
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/boundary'
        });
    }
    
    /**
     * Create a single Boundary
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/boundary'
        });
    }
    
    /**
     * Create multiple Boundaries
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/boundary/bulk'
        });
    }
    
}

export class CountyService {
    public static foo<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<FooResponse, FooError, ThrowOnError>({
            ...options,
            url: '/county/foo'
        });
    }
    
    /**
     * Retrieve a single County
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/county/{id}'
        });
    }
    
    /**
     * Update a single County
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/county/{id}'
        });
    }
    
    /**
     * Replace a single County
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/county/{id}'
        });
    }
    
    /**
     * Delete a single County
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/county/{id}'
        });
    }
    
    /**
     * Retrieve multiple Counties
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/county'
        });
    }
    
    /**
     * Create a single County
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/county'
        });
    }
    
    /**
     * Create multiple Counties
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/county/bulk'
        });
    }
    
}

export class PrefectureService {
    /**
     * Retrieve a single Prefecture
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/prefecture/{id}'
        });
    }
    
    /**
     * Update a single Prefecture
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/prefecture/{id}'
        });
    }
    
    /**
     * Replace a single Prefecture
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/prefecture/{id}'
        });
    }
    
    /**
     * Delete a single Prefecture
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/prefecture/{id}'
        });
    }
    
    /**
     * Retrieve multiple Prefectures
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/prefecture'
        });
    }
    
    /**
     * Create a single Prefecture
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/prefecture'
        });
    }
    
    /**
     * Create multiple Prefectures
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/prefecture/bulk'
        });
    }
    
}

export class ProvinceService {
    /**
     * Retrieve a single Province
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/province/{id}'
        });
    }
    
    /**
     * Update a single Province
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/province/{id}'
        });
    }
    
    /**
     * Replace a single Province
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/province/{id}'
        });
    }
    
    /**
     * Delete a single Province
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/province/{id}'
        });
    }
    
    /**
     * Retrieve multiple Provinces
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/province'
        });
    }
    
    /**
     * Create a single Province
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/province'
        });
    }
    
    /**
     * Create multiple Provinces
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/province/bulk'
        });
    }
    
}

export class TownshipService {
    /**
     * Retrieve a single Township
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/township/{id}'
        });
    }
    
    /**
     * Update a single Township
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/township/{id}'
        });
    }
    
    /**
     * Replace a single Township
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/township/{id}'
        });
    }
    
    /**
     * Delete a single Township
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/township/{id}'
        });
    }
    
    /**
     * Retrieve multiple Townships
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/township'
        });
    }
    
    /**
     * Create a single Township
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/township'
        });
    }
    
    /**
     * Create multiple Townships
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/township/bulk'
        });
    }
    
}

export class VilliageService {
    /**
     * Retrieve a single Villiage
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/villiage/{id}'
        });
    }
    
    /**
     * Update a single Villiage
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/villiage/{id}'
        });
    }
    
    /**
     * Replace a single Villiage
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/villiage/{id}'
        });
    }
    
    /**
     * Delete a single Villiage
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/villiage/{id}'
        });
    }
    
    /**
     * Retrieve multiple Villiages
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/villiage'
        });
    }
    
    /**
     * Create a single Villiage
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/villiage'
        });
    }
    
    /**
     * Create multiple Villiages
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/villiage/bulk'
        });
    }
    
}

export class RasterMapService {
    /**
     * Create a single RasterMap
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/rastermap'
        });
    }
    
    /**
     * Retrieve multiple RasterMaps
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/rastermap'
        });
    }
    
    /**
     * Retrieve a single RasterMap
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/rastermap/{id}'
        });
    }
    
    /**
     * Update a single RasterMap
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/rastermap/{id}'
        });
    }
    
    /**
     * Replace a single RasterMap
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/rastermap/{id}'
        });
    }
    
    /**
     * Delete a single RasterMap
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/rastermap/{id}'
        });
    }
    
    /**
     * Create multiple RasterMaps
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/rastermap/bulk'
        });
    }
    
}

export class SamplingAreaService {
    /**
     * Retrieve a single SamplingArea
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/samplingarea/{id}'
        });
    }
    
    /**
     * Update a single SamplingArea
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/samplingarea/{id}'
        });
    }
    
    /**
     * Replace a single SamplingArea
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/samplingarea/{id}'
        });
    }
    
    /**
     * Delete a single SamplingArea
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/samplingarea/{id}'
        });
    }
    
    /**
     * Retrieve multiple SamplingAreas
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/samplingarea'
        });
    }
    
    /**
     * Create a single SamplingArea
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/samplingarea'
        });
    }
    
    /**
     * Create multiple SamplingAreas
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/samplingarea/bulk'
        });
    }
    
}

export class SamplingGridService {
    /**
     * Retrieve a single SamplingGrid
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/samplinggrid/{id}'
        });
    }
    
    /**
     * Update a single SamplingGrid
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/samplinggrid/{id}'
        });
    }
    
    /**
     * Replace a single SamplingGrid
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/samplinggrid/{id}'
        });
    }
    
    /**
     * Delete a single SamplingGrid
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/samplinggrid/{id}'
        });
    }
    
    /**
     * Retrieve multiple SamplingGrids
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/samplinggrid'
        });
    }
    
    /**
     * Create a single SamplingGrid
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/samplinggrid'
        });
    }
    
    /**
     * Create multiple SamplingGrids
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/samplinggrid/bulk'
        });
    }
    
}

export class SamplingPointService {
    /**
     * Retrieve a single SamplingPoint
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/samplingpoint/{id}'
        });
    }
    
    /**
     * Update a single SamplingPoint
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/samplingpoint/{id}'
        });
    }
    
    /**
     * Replace a single SamplingPoint
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/samplingpoint/{id}'
        });
    }
    
    /**
     * Delete a single SamplingPoint
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/samplingpoint/{id}'
        });
    }
    
    /**
     * Retrieve multiple SamplingPoints
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/samplingpoint'
        });
    }
    
    /**
     * Create a single SamplingPoint
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/samplingpoint'
        });
    }
    
    /**
     * Create multiple SamplingPoints
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/samplingpoint/bulk'
        });
    }
    
}

export class SurveyedPointService {
    /**
     * Retrieve a single SurveyedPoint
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/surveyedpoint/{id}'
        });
    }
    
    /**
     * Update a single SurveyedPoint
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/surveyedpoint/{id}'
        });
    }
    
    /**
     * Replace a single SurveyedPoint
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/surveyedpoint/{id}'
        });
    }
    
    /**
     * Delete a single SurveyedPoint
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/surveyedpoint/{id}'
        });
    }
    
    /**
     * Retrieve multiple SurveyedPoints
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/surveyedpoint'
        });
    }
    
    /**
     * Create a single SurveyedPoint
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/surveyedpoint'
        });
    }
    
    /**
     * Create multiple SurveyedPoints
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/surveyedpoint/bulk'
        });
    }
    
}

export class SoilPropertyMappingUnitService {
    /**
     * Retrieve a single SoilPropertyMappingUnit
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/soilpropertymappingunit/{id}'
        });
    }
    
    /**
     * Update a single SoilPropertyMappingUnit
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/soilpropertymappingunit/{id}'
        });
    }
    
    /**
     * Replace a single SoilPropertyMappingUnit
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/soilpropertymappingunit/{id}'
        });
    }
    
    /**
     * Delete a single SoilPropertyMappingUnit
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/soilpropertymappingunit/{id}'
        });
    }
    
    /**
     * Retrieve multiple SoilPropertyMappingUnits
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/soilpropertymappingunit'
        });
    }
    
    /**
     * Create a single SoilPropertyMappingUnit
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/soilpropertymappingunit'
        });
    }
    
    /**
     * Create multiple SoilPropertyMappingUnits
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/soilpropertymappingunit/bulk'
        });
    }
    
}

export class SoilClassificationMappingUnitService {
    /**
     * Retrieve a single SoilClassificationMappingUnit
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/soilclassificationmappingunit/{id}'
        });
    }
    
    /**
     * Update a single SoilClassificationMappingUnit
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/soilclassificationmappingunit/{id}'
        });
    }
    
    /**
     * Replace a single SoilClassificationMappingUnit
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/soilclassificationmappingunit/{id}'
        });
    }
    
    /**
     * Delete a single SoilClassificationMappingUnit
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/soilclassificationmappingunit/{id}'
        });
    }
    
    /**
     * Retrieve multiple SoilClassificationMappingUnits
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/soilclassificationmappingunit'
        });
    }
    
    /**
     * Create a single SoilClassificationMappingUnit
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/soilclassificationmappingunit'
        });
    }
    
    /**
     * Create multiple SoilClassificationMappingUnits
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/soilclassificationmappingunit/bulk'
        });
    }
    
}

export class SiteConditionInfoService {
    /**
     * Retrieve a single SiteConditionInfo
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/siteconditioninfo/{id}'
        });
    }
    
    /**
     * Update a single SiteConditionInfo
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/siteconditioninfo/{id}'
        });
    }
    
    /**
     * Replace a single SiteConditionInfo
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/siteconditioninfo/{id}'
        });
    }
    
    /**
     * Delete a single SiteConditionInfo
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/siteconditioninfo/{id}'
        });
    }
    
    /**
     * Retrieve multiple SiteConditionInfos
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/siteconditioninfo'
        });
    }
    
    /**
     * Create a single SiteConditionInfo
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/siteconditioninfo'
        });
    }
    
    /**
     * Create multiple SiteConditionInfos
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/siteconditioninfo/bulk'
        });
    }
    
}

export class MorphologyBasicInfoService {
    /**
     * Retrieve a single MorphologyBasicInfo
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/morphologybasicinfo/{id}'
        });
    }
    
    /**
     * Update a single MorphologyBasicInfo
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/morphologybasicinfo/{id}'
        });
    }
    
    /**
     * Replace a single MorphologyBasicInfo
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/morphologybasicinfo/{id}'
        });
    }
    
    /**
     * Delete a single MorphologyBasicInfo
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/morphologybasicinfo/{id}'
        });
    }
    
    /**
     * Retrieve multiple MorphologyBasicInfos
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/morphologybasicinfo'
        });
    }
    
    /**
     * Create a single MorphologyBasicInfo
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/morphologybasicinfo'
        });
    }
    
    /**
     * Create multiple MorphologyBasicInfos
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/morphologybasicinfo/bulk'
        });
    }
    
}

export class MorphologyStratifiedInfoService {
    /**
     * Retrieve a single MorphologyStratifiedInfo
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/morphologystratifiedinfo/{id}'
        });
    }
    
    /**
     * Update a single MorphologyStratifiedInfo
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/morphologystratifiedinfo/{id}'
        });
    }
    
    /**
     * Replace a single MorphologyStratifiedInfo
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/morphologystratifiedinfo/{id}'
        });
    }
    
    /**
     * Delete a single MorphologyStratifiedInfo
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/morphologystratifiedinfo/{id}'
        });
    }
    
    /**
     * Retrieve multiple MorphologyStratifiedInfos
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/morphologystratifiedinfo'
        });
    }
    
    /**
     * Create a single MorphologyStratifiedInfo
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/morphologystratifiedinfo'
        });
    }
    
    /**
     * Create multiple MorphologyStratifiedInfos
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/morphologystratifiedinfo/bulk'
        });
    }
    
}

export class SamplingInfoService {
    /**
     * Retrieve a single SamplingInfo
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/samplinginfo/{id}'
        });
    }
    
    /**
     * Update a single SamplingInfo
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/samplinginfo/{id}'
        });
    }
    
    /**
     * Replace a single SamplingInfo
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/samplinginfo/{id}'
        });
    }
    
    /**
     * Delete a single SamplingInfo
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/samplinginfo/{id}'
        });
    }
    
    /**
     * Retrieve multiple SamplingInfos
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/samplinginfo'
        });
    }
    
    /**
     * Create a single SamplingInfo
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/samplinginfo'
        });
    }
    
    /**
     * Create multiple SamplingInfos
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/samplinginfo/bulk'
        });
    }
    
}

export class PreparationService {
    /**
     * Retrieve a single Preparation
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/preparation/{id}'
        });
    }
    
    /**
     * Update a single Preparation
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/preparation/{id}'
        });
    }
    
    /**
     * Replace a single Preparation
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/preparation/{id}'
        });
    }
    
    /**
     * Delete a single Preparation
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/preparation/{id}'
        });
    }
    
    /**
     * Retrieve multiple Preparations
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/preparation'
        });
    }
    
    /**
     * Create a single Preparation
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/preparation'
        });
    }
    
    /**
     * Create multiple Preparations
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/preparation/bulk'
        });
    }
    
}

export class SoilPhysicalPropertyService {
    /**
     * Retrieve a single SoilPhysicalProperty
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/soilphysicalproperty/{id}'
        });
    }
    
    /**
     * Update a single SoilPhysicalProperty
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/soilphysicalproperty/{id}'
        });
    }
    
    /**
     * Replace a single SoilPhysicalProperty
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/soilphysicalproperty/{id}'
        });
    }
    
    /**
     * Delete a single SoilPhysicalProperty
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/soilphysicalproperty/{id}'
        });
    }
    
    /**
     * Retrieve multiple SoilPhysicalProperties
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/soilphysicalproperty'
        });
    }
    
    /**
     * Create a single SoilPhysicalProperty
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/soilphysicalproperty'
        });
    }
    
    /**
     * Create multiple SoilPhysicalProperties
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/soilphysicalproperty/bulk'
        });
    }
    
}

export class SoilChemicalPropertyService {
    /**
     * Retrieve a single SoilChemicalProperty
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/soilchemicalproperty/{id}'
        });
    }
    
    /**
     * Update a single SoilChemicalProperty
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/soilchemicalproperty/{id}'
        });
    }
    
    /**
     * Replace a single SoilChemicalProperty
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/soilchemicalproperty/{id}'
        });
    }
    
    /**
     * Delete a single SoilChemicalProperty
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/soilchemicalproperty/{id}'
        });
    }
    
    /**
     * Retrieve multiple SoilChemicalProperties
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/soilchemicalproperty'
        });
    }
    
    /**
     * Create a single SoilChemicalProperty
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/soilchemicalproperty'
        });
    }
    
    /**
     * Create multiple SoilChemicalProperties
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/soilchemicalproperty/bulk'
        });
    }
    
}

export class SoilEnviroemtalPropertyService {
    /**
     * Retrieve a single SoilEnviroemtalProperty
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/soilenviroemtalproperty/{id}'
        });
    }
    
    /**
     * Update a single SoilEnviroemtalProperty
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/soilenviroemtalproperty/{id}'
        });
    }
    
    /**
     * Replace a single SoilEnviroemtalProperty
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/soilenviroemtalproperty/{id}'
        });
    }
    
    /**
     * Delete a single SoilEnviroemtalProperty
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/soilenviroemtalproperty/{id}'
        });
    }
    
    /**
     * Retrieve multiple SoilEnviroemtalProperties
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/soilenviroemtalproperty'
        });
    }
    
    /**
     * Create a single SoilEnviroemtalProperty
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/soilenviroemtalproperty'
        });
    }
    
    /**
     * Create multiple SoilEnviroemtalProperties
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/soilenviroemtalproperty/bulk'
        });
    }
    
}

export class SoilBiologicalPropertyService {
    /**
     * Retrieve a single SoilBiologicalProperty
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/soilbiologicalproperty/{id}'
        });
    }
    
    /**
     * Update a single SoilBiologicalProperty
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/soilbiologicalproperty/{id}'
        });
    }
    
    /**
     * Replace a single SoilBiologicalProperty
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/soilbiologicalproperty/{id}'
        });
    }
    
    /**
     * Delete a single SoilBiologicalProperty
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/soilbiologicalproperty/{id}'
        });
    }
    
    /**
     * Retrieve multiple SoilBiologicalProperties
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/soilbiologicalproperty'
        });
    }
    
    /**
     * Create a single SoilBiologicalProperty
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/soilbiologicalproperty'
        });
    }
    
    /**
     * Create multiple SoilBiologicalProperties
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/soilbiologicalproperty/bulk'
        });
    }
    
}

export class TransportationService {
    /**
     * Retrieve a single Transportation
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/transportation/{id}'
        });
    }
    
    /**
     * Update a single Transportation
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/transportation/{id}'
        });
    }
    
    /**
     * Replace a single Transportation
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/transportation/{id}'
        });
    }
    
    /**
     * Delete a single Transportation
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/transportation/{id}'
        });
    }
    
    /**
     * Retrieve multiple Transportation
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/transportation'
        });
    }
    
    /**
     * Create a single Transportation
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/transportation'
        });
    }
    
    /**
     * Create multiple Transportation
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/transportation/bulk'
        });
    }
    
}

export class TransportationInventoryService {
    /**
     * Retrieve a single TransportationInventory
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/transportationinventory/{id}'
        });
    }
    
    /**
     * Update a single TransportationInventory
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/transportationinventory/{id}'
        });
    }
    
    /**
     * Replace a single TransportationInventory
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/transportationinventory/{id}'
        });
    }
    
    /**
     * Delete a single TransportationInventory
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/transportationinventory/{id}'
        });
    }
    
    /**
     * Retrieve multiple TransportationInventories
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/transportationinventory'
        });
    }
    
    /**
     * Create a single TransportationInventory
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/transportationinventory'
        });
    }
    
    /**
     * Create multiple TransportationInventories
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/transportationinventory/bulk'
        });
    }
    
}

export class SampleReceiptService {
    /**
     * Retrieve a single SampleReceipt
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/samplereceipt/{id}'
        });
    }
    
    /**
     * Update a single SampleReceipt
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/samplereceipt/{id}'
        });
    }
    
    /**
     * Replace a single SampleReceipt
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/samplereceipt/{id}'
        });
    }
    
    /**
     * Delete a single SampleReceipt
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/samplereceipt/{id}'
        });
    }
    
    /**
     * Retrieve multiple SampleReceipts
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/samplereceipt'
        });
    }
    
    /**
     * Create a single SampleReceipt
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/samplereceipt'
        });
    }
    
    /**
     * Create multiple SampleReceipts
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/samplereceipt/bulk'
        });
    }
    
}

export class SampleReceiptInventoryService {
    /**
     * Retrieve a single SampleReceiptInventory
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/samplereceiptinventory/{id}'
        });
    }
    
    /**
     * Update a single SampleReceiptInventory
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/samplereceiptinventory/{id}'
        });
    }
    
    /**
     * Replace a single SampleReceiptInventory
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/samplereceiptinventory/{id}'
        });
    }
    
    /**
     * Delete a single SampleReceiptInventory
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/samplereceiptinventory/{id}'
        });
    }
    
    /**
     * Retrieve multiple SampleReceiptInventories
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/samplereceiptinventory'
        });
    }
    
    /**
     * Create a single SampleReceiptInventory
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/samplereceiptinventory'
        });
    }
    
    /**
     * Create multiple SampleReceiptInventories
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/samplereceiptinventory/bulk'
        });
    }
    
}

export class QualityControlSampleService {
    /**
     * Retrieve a single QualityControlSample
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/qualitycontrolsample/{id}'
        });
    }
    
    /**
     * Update a single QualityControlSample
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/qualitycontrolsample/{id}'
        });
    }
    
    /**
     * Replace a single QualityControlSample
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/qualitycontrolsample/{id}'
        });
    }
    
    /**
     * Delete a single QualityControlSample
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/qualitycontrolsample/{id}'
        });
    }
    
    /**
     * Retrieve multiple QualityControlSamples
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/qualitycontrolsample'
        });
    }
    
    /**
     * Create a single QualityControlSample
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/qualitycontrolsample'
        });
    }
    
    /**
     * Create multiple QualityControlSamples
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/qualitycontrolsample/bulk'
        });
    }
    
}

export class SampleRepositoryService {
    /**
     * Retrieve a single SampleRepository
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/samplerepository/{id}'
        });
    }
    
    /**
     * Update a single SampleRepository
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/samplerepository/{id}'
        });
    }
    
    /**
     * Replace a single SampleRepository
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/samplerepository/{id}'
        });
    }
    
    /**
     * Delete a single SampleRepository
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/samplerepository/{id}'
        });
    }
    
    /**
     * Retrieve multiple SampleRepositories
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/samplerepository'
        });
    }
    
    /**
     * Create a single SampleRepository
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/samplerepository'
        });
    }
    
    /**
     * Create multiple SampleRepositories
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/samplerepository/bulk'
        });
    }
    
}

export class TestingLabService {
    /**
     * Retrieve a single TestingLab
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/testinglab/{id}'
        });
    }
    
    /**
     * Update a single TestingLab
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/testinglab/{id}'
        });
    }
    
    /**
     * Replace a single TestingLab
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/testinglab/{id}'
        });
    }
    
    /**
     * Delete a single TestingLab
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/testinglab/{id}'
        });
    }
    
    /**
     * Retrieve multiple TestingLabs
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/testinglab'
        });
    }
    
    /**
     * Create a single TestingLab
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/testinglab'
        });
    }
    
    /**
     * Create multiple TestingLabs
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/testinglab/bulk'
        });
    }
    
}

export class QualityControlLabService {
    /**
     * Retrieve a single QualityControlLab
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/qualitycontrollab/{id}'
        });
    }
    
    /**
     * Update a single QualityControlLab
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/qualitycontrollab/{id}'
        });
    }
    
    /**
     * Replace a single QualityControlLab
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/qualitycontrollab/{id}'
        });
    }
    
    /**
     * Delete a single QualityControlLab
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/qualitycontrollab/{id}'
        });
    }
    
    /**
     * Retrieve multiple QualityControlLabs
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/qualitycontrollab'
        });
    }
    
    /**
     * Create a single QualityControlLab
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/qualitycontrollab'
        });
    }
    
    /**
     * Create multiple QualityControlLabs
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/qualitycontrollab/bulk'
        });
    }
    
}

export class PersonnelService {
    /**
     * Retrieve a single Personnel
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/personnel/{id}'
        });
    }
    
    /**
     * Update a single Personnel
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/personnel/{id}'
        });
    }
    
    /**
     * Replace a single Personnel
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/personnel/{id}'
        });
    }
    
    /**
     * Delete a single Personnel
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/personnel/{id}'
        });
    }
    
    /**
     * Retrieve multiple Personnel
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/personnel'
        });
    }
    
    /**
     * Create a single Personnel
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/personnel'
        });
    }
    
    /**
     * Create multiple Personnel
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/personnel/bulk'
        });
    }
    
}

export class DataIdInfoService {
    /**
     * Retrieve a single DataIdInfo
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/dataidinfo/{id}'
        });
    }
    
    /**
     * Update a single DataIdInfo
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/dataidinfo/{id}'
        });
    }
    
    /**
     * Replace a single DataIdInfo
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/dataidinfo/{id}'
        });
    }
    
    /**
     * Delete a single DataIdInfo
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/dataidinfo/{id}'
        });
    }
    
    /**
     * Retrieve multiple DataIdInfos
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/dataidinfo'
        });
    }
    
    /**
     * Create a single DataIdInfo
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/dataidinfo'
        });
    }
    
    /**
     * Create multiple DataIdInfos
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/dataidinfo/bulk'
        });
    }
    
}

export class RefSysInfoService {
    /**
     * Retrieve a single RefSysInfo
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/refsysinfo/{id}'
        });
    }
    
    /**
     * Update a single RefSysInfo
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/refsysinfo/{id}'
        });
    }
    
    /**
     * Replace a single RefSysInfo
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/refsysinfo/{id}'
        });
    }
    
    /**
     * Delete a single RefSysInfo
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/refsysinfo/{id}'
        });
    }
    
    /**
     * Retrieve multiple RefSysInfos
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/refsysinfo'
        });
    }
    
    /**
     * Create a single RefSysInfo
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/refsysinfo'
        });
    }
    
    /**
     * Create multiple RefSysInfos
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/refsysinfo/bulk'
        });
    }
    
}

export class ContInfoService {
    /**
     * Retrieve a single ContInfo
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/continfo/{id}'
        });
    }
    
    /**
     * Update a single ContInfo
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/continfo/{id}'
        });
    }
    
    /**
     * Replace a single ContInfo
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/continfo/{id}'
        });
    }
    
    /**
     * Delete a single ContInfo
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/continfo/{id}'
        });
    }
    
    /**
     * Retrieve multiple ContInfos
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/continfo'
        });
    }
    
    /**
     * Create a single ContInfo
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/continfo'
        });
    }
    
    /**
     * Create multiple ContInfos
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/continfo/bulk'
        });
    }
    
}

export class DqInfoService {
    /**
     * Retrieve a single DqInfo
     */
    public static getOne<ThrowOnError extends boolean = false>(options: Options<GetOneData, ThrowOnError>) {
        return (options?.client ?? client).get<GetOneResponse, GetOneError, ThrowOnError>({
            ...options,
            url: '/dqinfo/{id}'
        });
    }
    
    /**
     * Update a single DqInfo
     */
    public static updateOne<ThrowOnError extends boolean = false>(options: Options<UpdateOneData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateOneResponse, UpdateOneError, ThrowOnError>({
            ...options,
            url: '/dqinfo/{id}'
        });
    }
    
    /**
     * Replace a single DqInfo
     */
    public static replaceOne<ThrowOnError extends boolean = false>(options: Options<ReplaceOneData, ThrowOnError>) {
        return (options?.client ?? client).put<ReplaceOneResponse, ReplaceOneError, ThrowOnError>({
            ...options,
            url: '/dqinfo/{id}'
        });
    }
    
    /**
     * Delete a single DqInfo
     */
    public static deleteOne<ThrowOnError extends boolean = false>(options: Options<DeleteOneData, ThrowOnError>) {
        return (options?.client ?? client).delete<DeleteOneResponse, DeleteOneError, ThrowOnError>({
            ...options,
            url: '/dqinfo/{id}'
        });
    }
    
    /**
     * Retrieve multiple DqInfos
     */
    public static getMany<ThrowOnError extends boolean = false>(options?: Options<GetManyData, ThrowOnError>) {
        return (options?.client ?? client).get<GetManyResponse, GetManyError, ThrowOnError>({
            ...options,
            url: '/dqinfo'
        });
    }
    
    /**
     * Create a single DqInfo
     */
    public static createOne<ThrowOnError extends boolean = false>(options: Options<CreateOneData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateOneResponse, CreateOneError, ThrowOnError>({
            ...options,
            url: '/dqinfo'
        });
    }
    
    /**
     * Create multiple DqInfos
     */
    public static createMany<ThrowOnError extends boolean = false>(options: Options<CreateManyData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateManyResponse, CreateManyError, ThrowOnError>({
            ...options,
            url: '/dqinfo/bulk'
        });
    }
    
}

export class AuthService {
    public static login<ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) {
        return (options?.client ?? client).post<LoginResponse, LoginError, ThrowOnError>({
            ...options,
            url: '/auth/auth/login'
        });
    }
    
    public static getProfile<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetProfileResponse, GetProfileError, ThrowOnError>({
            ...options,
            url: '/auth/profile'
        });
    }
    
    public static test<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<TestResponse, TestError, ThrowOnError>({
            ...options,
            url: '/auth/test'
        });
    }
    
}

export class RoleService {
    public static create<ThrowOnError extends boolean = false>(options: Options<CreateData, ThrowOnError>) {
        return (options?.client ?? client).post<CreateResponse, CreateError, ThrowOnError>({
            ...options,
            url: '/role'
        });
    }
    
    public static findAll<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<FindAllResponse, FindAllError, ThrowOnError>({
            ...options,
            url: '/role'
        });
    }
    
    public static findOne<ThrowOnError extends boolean = false>(options: Options<FindOneData, ThrowOnError>) {
        return (options?.client ?? client).get<FindOneResponse, FindOneError, ThrowOnError>({
            ...options,
            url: '/role/{id}'
        });
    }
    
    public static update<ThrowOnError extends boolean = false>(options: Options<UpdateData, ThrowOnError>) {
        return (options?.client ?? client).patch<UpdateResponse, UpdateError, ThrowOnError>({
            ...options,
            url: '/role/{id}'
        });
    }
    
    public static remove<ThrowOnError extends boolean = false>(options: Options<RemoveData, ThrowOnError>) {
        return (options?.client ?? client).delete<RemoveResponse, RemoveError, ThrowOnError>({
            ...options,
            url: '/role/{id}'
        });
    }
    
}

export class FceService {
    public static getDict<ThrowOnError extends boolean = false>(options: Options<GetDictData, ThrowOnError>) {
        return (options?.client ?? client).get<GetDictResponse, GetDictError, ThrowOnError>({
            ...options,
            url: '/faster-crud/dict/{entity}'
        });
    }
    
    public static getAll<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).get<GetAllResponse, GetAllError, ThrowOnError>({
            ...options,
            url: '/faster-crud/all'
        });
    }
    
}

export class TestRasterService {
    public static find<ThrowOnError extends boolean = false>(options: Options<FindData, ThrowOnError>) {
        return (options?.client ?? client).get<FindResponse, FindError, ThrowOnError>({
            ...options,
            url: '/testraster/{id}/{type}'
        });
    }
    
}

export class FileService {
    public static uploadFile<ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) {
        return (options?.client ?? client).post<UploadFileResponse, UploadFileError, ThrowOnError>({
            ...options,
            url: '/file/upload'
        });
    }
    
    public static getFile<ThrowOnError extends boolean = false>(options: Options<GetFileData, ThrowOnError>) {
        return (options?.client ?? client).get<GetFileResponse, GetFileError, ThrowOnError>({
            ...options,
            url: '/file/{key}'
        });
    }
    
}